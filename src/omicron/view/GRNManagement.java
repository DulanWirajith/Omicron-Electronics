/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package omicron.view;

import Others.IDGenerator;
import Others.ValidationController;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.DatatypeConverter;
import omicron.controller.AccountController;
import omicron.controller.BatchController;
import omicron.controller.BrandController;
import omicron.controller.Cust_ReturnsController;
import omicron.controller.CustomerController;
import omicron.controller.ItemController;
import omicron.controller.OrdersController;
import omicron.controller.PaymentController;
import omicron.controller.Sup_PaymentController;
import omicron.controller.Sup_ReturnsController;
import omicron.controller.SupplierController;
import omicron.controller.Supply_OrderController;
import omicron.model.Account;
import omicron.model.Batch;
import omicron.model.Brand;
import omicron.model.Cust_Returns;
import omicron.model.Customer;
import omicron.model.GRN;
import omicron.model.Item;
import omicron.model.Order_Detail;
import omicron.model.Orders;
import omicron.model.Payment;
import omicron.model.Sup_Payment;
import omicron.model.Sup_Returns;
import omicron.model.Supplier;
import omicron.model.Supply_Order;
import omicron.model.Supply_Order_Detail;

/**
 *
 * @author Dulan
 */
public class GRNManagement extends javax.swing.JFrame {

    int timeRun = 0;

    /**
     * Creates new form CustomerManagement
     */
    public GRNManagement() {
        initComponents();
        getClock();
        loadSupplierIds();
        omTextSupplierName.setEditable(false);
        addNewBatchPanel.setVisible(false);
        setOrderDate();

        loadAccounts();
//        omLable_UnitPrice.setText("0.00");
        reasonLable.setVisible(false);
        reasonLable.setText("No Price Change");
        setBatchId();
        omText_PaymentId.setEditable(false);
        setPaymentId();
        omText_PaymentPayAmount1.setText("0.00");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homePanel = new javax.swing.JPanel();
        homeLabel = new javax.swing.JLabel();
        homeIconPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        mainButtonPanel = new javax.swing.JPanel();
        closeButtonLabel = new javax.swing.JLabel();
        minimizeButtonLabel = new javax.swing.JLabel();
        clockPanel = new javax.swing.JPanel();
        clock = new javax.swing.JLabel();
        invoicePanel = new javax.swing.JPanel();
        item_AddAndReturnTabPanel = new javax.swing.JTabbedPane();
        omPanel_SellItem = new javax.swing.JPanel();
        itemDetailPanel = new javax.swing.JPanel();
        omLabel_BatchId1 = new javax.swing.JLabel();
        omLabel_UnitPrice = new javax.swing.JLabel();
        omLabel_ItemName1 = new javax.swing.JLabel();
        omLabel_QtyOnHand1 = new javax.swing.JLabel();
        omLabel_AvailableQty = new javax.swing.JLabel();
        omLabel_Qty1 = new javax.swing.JLabel();
        omLabel_FullQty1 = new javax.swing.JLabel();
        omLabel_FullQtyView1 = new javax.swing.JLabel();
        omText_Qty = new javax.swing.JTextField();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        omTable_OrderItemDetail = new javax.swing.JTable();
        omLabel_itemDetailRemoveItem = new javax.swing.JLabel();
        omCombo_ItemName = new javax.swing.JComboBox<>();
        omLable_SellingPrice = new javax.swing.JLabel();
        omLabel_ItemCode1 = new javax.swing.JLabel();
        omCombo_ItemCode = new javax.swing.JComboBox<>();
        omLabel_ItemDescription1 = new javax.swing.JLabel();
        omLabel_BuyingPrice = new javax.swing.JLabel();
        addNewBatchPanel = new javax.swing.JPanel();
        omLabel_ItemDescription5 = new javax.swing.JLabel();
        omLabel_UnitPrice4 = new javax.swing.JLabel();
        omLabel_ItemCode8 = new javax.swing.JLabel();
        omCombo_AddItemCode = new javax.swing.JComboBox<>();
        omLabel_QtyOnHand4 = new javax.swing.JLabel();
        omLabel_BatchId6 = new javax.swing.JLabel();
        omLabel_NewBatchId = new javax.swing.JLabel();
        omLabel_Qty5 = new javax.swing.JLabel();
        omLabel_FullQty4 = new javax.swing.JLabel();
        omLabel_AddDesc = new javax.swing.JLabel();
        omText_Qty3 = new javax.swing.JTextField();
        omLabel_ItemName6 = new javax.swing.JLabel();
        omCombo_AddItemName = new javax.swing.JComboBox<>();
        omLabel_QtyOnHandView4 = new javax.swing.JLabel();
        omText_AddSellingPrice = new javax.swing.JTextField();
        omText_AddBuyingPrice = new javax.swing.JTextField();
        omLabel_LastBatchId = new javax.swing.JLabel();
        omPanel_ReturnItem = new javax.swing.JPanel();
        omPanel_SellItem1 = new javax.swing.JPanel();
        itemDetailPanel3 = new javax.swing.JPanel();
        tablePanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        omTable_FinalGRNTable = new javax.swing.JTable();
        omLabel_itemDetailFullAmount3 = new javax.swing.JLabel();
        omLabel_itemDetailRemoveItem1 = new javax.swing.JLabel();
        omLabel_itemDetailConfirm2 = new javax.swing.JLabel();
        omLabel_itemDetailFullAmountView = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        omTab_ReturnTabbedPane1 = new javax.swing.JTabbedPane();
        omPanel_GetSellItems1 = new javax.swing.JPanel();
        itemDetailPanel2 = new javax.swing.JPanel();
        omLabel_ReturnDetailReturn1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        omTable_ReturnItems = new javax.swing.JTable();
        omPanel_ReturnItemPanel1 = new javax.swing.JPanel();
        returnDetailPanel1 = new javax.swing.JPanel();
        tablePanel4 = new javax.swing.JPanel();
        omLabel_ReturnDetailOK1 = new javax.swing.JLabel();
        omLabel_ReturnDetailRemove1 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        omTable_ReturnItemcConfirm = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        paymentPanel = new javax.swing.JPanel();
        omLabel_PaymentDate1 = new javax.swing.JLabel();
        omLabel_PaymentPayAmount1 = new javax.swing.JLabel();
        omText_PaymentPayAmount1 = new javax.swing.JTextField();
        omLabel_PaymentDate2 = new javax.swing.JLabel();
        omLabel_PaymentPayAmount2 = new javax.swing.JLabel();
        omText_PaymentPayAmount2 = new javax.swing.JTextField();
        omLabel_PaymentPayAmount3 = new javax.swing.JLabel();
        omText_PaymentPayAmount3 = new javax.swing.JTextField();
        omText_PaymentPayAmount4 = new javax.swing.JTextField();
        omLabel_PaymentPayAmount4 = new javax.swing.JLabel();
        omLabel_PaymentBalance = new javax.swing.JLabel();
        omLabel_PaymentPayAmount = new javax.swing.JLabel();
        omLabel_PaymentNewBalance = new javax.swing.JLabel();
        omLabel_PaymentNewBalanceView = new javax.swing.JLabel();
        omText_PaymentPayAmount = new javax.swing.JTextField();
        omLabel_PaymentBalanceView = new javax.swing.JLabel();
        omLabel_itemDetailConfirm1 = new javax.swing.JLabel();
        omLabel_TotAmount = new javax.swing.JLabel();
        omLable_PaymentTotAmountView = new javax.swing.JLabel();
        omLabel_PaymentAccount = new javax.swing.JLabel();
        omText_PaymentDate = new javax.swing.JLabel();
        omText_PaymentId = new javax.swing.JTextField();
        omLabel_PaymentId = new javax.swing.JLabel();
        omLabel_PaymentDate = new javax.swing.JLabel();
        omCombo_PaymentAccounts = new javax.swing.JComboBox<>();
        paymentPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PaymentTable = new javax.swing.JTable();
        omLabel_PaymentBalance1 = new javax.swing.JLabel();
        omLabel_TotalPayment = new javax.swing.JLabel();
        omLabel_CustomerId = new javax.swing.JLabel();
        omCombo_SupplierId = new javax.swing.JComboBox<>();
        omTextSupplierName = new javax.swing.JTextField();
        omLabel_CustomerName = new javax.swing.JLabel();
        omLabel_OrdersId1 = new javax.swing.JLabel();
        omText_SupplierNic = new javax.swing.JTextField();
        omLabel_OrdersId = new javax.swing.JLabel();
        omLabel_OrdersDateView = new javax.swing.JLabel();
        omLabel_OrdersDate = new javax.swing.JLabel();
        omText_OrdersId1 = new javax.swing.JTextField();
        reasonLable = new javax.swing.JLabel();
        MainLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homePanel.setOpaque(false);

        homeLabel.setFont(new java.awt.Font("Lucida Bright", 3, 85)); // NOI18N
        homeLabel.setForeground(new java.awt.Color(255, 205, 200));
        homeLabel.setText("  O");

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );

        getContentPane().add(homePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 130));

        homeIconPanel.setOpaque(false);

        jButton1.setFont(new java.awt.Font("Miriam Fixed", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 102));
        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homeIconPanelLayout = new javax.swing.GroupLayout(homeIconPanel);
        homeIconPanel.setLayout(homeIconPanelLayout);
        homeIconPanelLayout.setHorizontalGroup(
            homeIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeIconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homeIconPanelLayout.setVerticalGroup(
            homeIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeIconPanelLayout.createSequentialGroup()
                .addContainerGap(481, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        getContentPane().add(homeIconPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 100, 560));

        titlePanel.setOpaque(false);

        titleLabel.setFont(new java.awt.Font("Monotype Corsiva", 3, 48)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 0));
        titleLabel.setText("GRN Management...");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGap(0, 32, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(titlePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 440, 50));

        mainButtonPanel.setOpaque(false);

        closeButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/omicron.images/close_64.png"))); // NOI18N
        closeButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonLabelMouseClicked(evt);
            }
        });

        minimizeButtonLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\First Sem Project\\Omicron\\Omicron\\Omicron_Electronics\\src\\omicron.images\\minimize_64.png")); // NOI18N
        minimizeButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeButtonLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainButtonPanelLayout = new javax.swing.GroupLayout(mainButtonPanel);
        mainButtonPanel.setLayout(mainButtonPanelLayout);
        mainButtonPanelLayout.setHorizontalGroup(
            mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainButtonPanelLayout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(minimizeButtonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButtonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mainButtonPanelLayout.setVerticalGroup(
            mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainButtonPanelLayout.createSequentialGroup()
                .addGroup(mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButtonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minimizeButtonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(mainButtonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 0, 130, -1));

        clockPanel.setOpaque(false);

        clock.setFont(new java.awt.Font("DS-Digital", 0, 60)); // NOI18N
        clock.setForeground(new java.awt.Color(0, 165, 255));
        clock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clock.setText("2:13:15  PM");

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
        );

        getContentPane().add(clockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 0, 270, 80));

        invoicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        invoicePanel.setOpaque(false);

        item_AddAndReturnTabPanel.setBackground(new java.awt.Color(0, 165, 255));
        item_AddAndReturnTabPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        omPanel_SellItem.setOpaque(false);

        itemDetailPanel.setOpaque(false);

        omLabel_BatchId1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_BatchId1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_BatchId1.setText("Batch ID");
        omLabel_BatchId1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_UnitPrice.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_UnitPrice.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_UnitPrice.setText("Selling Price");
        omLabel_UnitPrice.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_UnitPrice.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemName1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemName1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_ItemName1.setText("Sub Item Name");
        omLabel_ItemName1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemName1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_QtyOnHand1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_QtyOnHand1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_QtyOnHand1.setText("Available Qty");
        omLabel_QtyOnHand1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_QtyOnHand1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_AvailableQty.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_AvailableQty.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_AvailableQty.setOpaque(true);

        omLabel_Qty1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_Qty1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_Qty1.setText("Received Qty");
        omLabel_Qty1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty1.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_FullQty1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_FullQty1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_FullQty1.setText("Descripton");
        omLabel_FullQty1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_FullQty1.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_FullQty1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_FullQtyView1.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_FullQtyView1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_FullQtyView1.setOpaque(true);

        omText_Qty.setBackground(new java.awt.Color(204, 204, 204));
        omText_Qty.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omText_Qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_QtyomLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_Qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_QtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_QtyKeyReleased(evt);
            }
        });

        tablePanel.setOpaque(false);

        omTable_OrderItemDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Item Code", "Sub Item Name", "Last Batch Id", "Buying Price", "Selling Price", "Available Qty", "Request Qty", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_OrderItemDetail.setOpaque(false);
        omTable_OrderItemDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omTable_OrderItemDetailMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(omTable_OrderItemDetail);

        omLabel_itemDetailRemoveItem.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailRemoveItem.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailRemoveItem.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailRemoveItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailRemoveItem.setText("Add New Batch");
        omLabel_itemDetailRemoveItem.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailRemoveItem.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailRemoveItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailRemoveItemMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(omLabel_itemDetailRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(omLabel_itemDetailRemoveItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        omCombo_ItemName.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_ItemName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_ItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_ItemNameActionPerformed(evt);
            }
        });

        omLable_SellingPrice.setBackground(new java.awt.Color(204, 204, 204));
        omLable_SellingPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLable_SellingPrice.setOpaque(true);
        omLable_SellingPrice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLable_SellingPriceMouseClicked(evt);
            }
        });

        omLabel_ItemCode1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemCode1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_ItemCode1.setText("Item Code");
        omLabel_ItemCode1.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_ItemCode.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_ItemCode.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_ItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_ItemCodeActionPerformed(evt);
            }
        });

        omLabel_ItemDescription1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemDescription1.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_ItemDescription1.setText("Buying Price");
        omLabel_ItemDescription1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemDescription1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_BuyingPrice.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_BuyingPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_BuyingPrice.setOpaque(true);

        addNewBatchPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        addNewBatchPanel.setOpaque(false);

        omLabel_ItemDescription5.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemDescription5.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_ItemDescription5.setText("Buying Price");
        omLabel_ItemDescription5.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_ItemDescription5.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_ItemDescription5.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_UnitPrice4.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_UnitPrice4.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_UnitPrice4.setText("Selling Price");
        omLabel_UnitPrice4.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_UnitPrice4.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_UnitPrice4.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemCode8.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemCode8.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_ItemCode8.setText("Item Code");
        omLabel_ItemCode8.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_ItemCode8.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_ItemCode8.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_AddItemCode.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_AddItemCode.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_AddItemCode.setMaximumSize(new java.awt.Dimension(100, 21));
        omCombo_AddItemCode.setMinimumSize(new java.awt.Dimension(50, 21));
        omCombo_AddItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_AddItemCodeActionPerformed(evt);
            }
        });

        omLabel_QtyOnHand4.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_QtyOnHand4.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_QtyOnHand4.setText("Available Qty");
        omLabel_QtyOnHand4.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_QtyOnHand4.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_QtyOnHand4.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_BatchId6.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_BatchId6.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_BatchId6.setText("Batch ID");
        omLabel_BatchId6.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_BatchId6.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_BatchId6.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_NewBatchId.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_NewBatchId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_NewBatchId.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_NewBatchId.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_NewBatchId.setOpaque(true);

        omLabel_Qty5.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_Qty5.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_Qty5.setText("Received Qty");
        omLabel_Qty5.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_Qty5.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_Qty5.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_FullQty4.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_FullQty4.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_FullQty4.setText("Descripton");
        omLabel_FullQty4.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_FullQty4.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_FullQty4.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_AddDesc.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_AddDesc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_AddDesc.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_AddDesc.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_AddDesc.setOpaque(true);

        omText_Qty3.setBackground(new java.awt.Color(204, 204, 204));
        omText_Qty3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omText_Qty3.setMaximumSize(new java.awt.Dimension(100, 21));
        omText_Qty3.setMinimumSize(new java.awt.Dimension(50, 21));
        omText_Qty3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_Qty3omLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_Qty3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_Qty3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_Qty3KeyReleased(evt);
            }
        });

        omLabel_ItemName6.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemName6.setForeground(new java.awt.Color(102, 102, 102));
        omLabel_ItemName6.setText("Sub Item Name");
        omLabel_ItemName6.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_ItemName6.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_ItemName6.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_AddItemName.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_AddItemName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_AddItemName.setMaximumSize(new java.awt.Dimension(100, 21));
        omCombo_AddItemName.setMinimumSize(new java.awt.Dimension(50, 21));
        omCombo_AddItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_AddItemNameActionPerformed(evt);
            }
        });

        omLabel_QtyOnHandView4.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_QtyOnHandView4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_QtyOnHandView4.setText("0");
        omLabel_QtyOnHandView4.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_QtyOnHandView4.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_QtyOnHandView4.setOpaque(true);

        omText_AddSellingPrice.setBackground(new java.awt.Color(204, 204, 204));
        omText_AddSellingPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omText_AddSellingPrice.setMaximumSize(new java.awt.Dimension(100, 21));
        omText_AddSellingPrice.setMinimumSize(new java.awt.Dimension(50, 21));
        omText_AddSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_AddSellingPriceomLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_AddSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_AddSellingPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_AddSellingPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                omText_AddSellingPriceKeyTyped(evt);
            }
        });

        omText_AddBuyingPrice.setBackground(new java.awt.Color(204, 204, 204));
        omText_AddBuyingPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omText_AddBuyingPrice.setMaximumSize(new java.awt.Dimension(100, 21));
        omText_AddBuyingPrice.setMinimumSize(new java.awt.Dimension(50, 21));
        omText_AddBuyingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_AddBuyingPriceomLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_AddBuyingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_AddBuyingPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_AddBuyingPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                omText_AddBuyingPriceKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout addNewBatchPanelLayout = new javax.swing.GroupLayout(addNewBatchPanel);
        addNewBatchPanel.setLayout(addNewBatchPanelLayout);
        addNewBatchPanelLayout.setHorizontalGroup(
            addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(omLabel_BatchId6, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_ItemDescription5, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omLabel_NewBatchId, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(omText_AddBuyingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_UnitPrice4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omText_AddSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_ItemName6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(omCombo_AddItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_ItemCode8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omCombo_AddItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(omLabel_FullQty4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_AddDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                    .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_QtyOnHand4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_QtyOnHandView4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_Qty5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omText_Qty3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        addNewBatchPanelLayout.setVerticalGroup(
            addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_NewBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omLabel_ItemCode8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(omCombo_AddItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(omCombo_AddItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_BatchId6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_ItemName6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_AddDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_FullQty4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omLabel_ItemDescription5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(addNewBatchPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(addNewBatchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_UnitPrice4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_AddSellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omText_AddBuyingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(omLabel_Qty5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(omLabel_QtyOnHandView4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(omLabel_QtyOnHand4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(omText_Qty3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        omLabel_LastBatchId.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_LastBatchId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_LastBatchId.setMaximumSize(new java.awt.Dimension(100, 21));
        omLabel_LastBatchId.setMinimumSize(new java.awt.Dimension(50, 21));
        omLabel_LastBatchId.setOpaque(true);

        javax.swing.GroupLayout itemDetailPanelLayout = new javax.swing.GroupLayout(itemDetailPanel);
        itemDetailPanel.setLayout(itemDetailPanelLayout);
        itemDetailPanelLayout.setHorizontalGroup(
            itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemName1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(omLabel_ItemDescription1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omCombo_ItemName, 0, 167, Short.MAX_VALUE)
                            .addComponent(omLabel_BuyingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemCode1, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(omLabel_UnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLable_SellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omCombo_ItemCode, 0, 120, Short.MAX_VALUE))
                        .addGap(24, 24, 24)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_QtyOnHand1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_BatchId1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_AvailableQty, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_LastBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_FullQty1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(omLabel_FullQtyView1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_Qty1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(omText_Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(addNewBatchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        itemDetailPanelLayout.setVerticalGroup(
            itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_ItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(omCombo_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(omLabel_ItemCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_FullQtyView1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(omLabel_LastBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omCombo_ItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_BatchId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_FullQty1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(omLabel_AvailableQty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omLabel_ItemDescription1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                    .addComponent(omLabel_QtyOnHand1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                    .addComponent(omLable_SellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(omLabel_Qty1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(omText_Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(omLabel_UnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(omLabel_BuyingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNewBatchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout omPanel_SellItemLayout = new javax.swing.GroupLayout(omPanel_SellItem);
        omPanel_SellItem.setLayout(omPanel_SellItemLayout);
        omPanel_SellItemLayout.setHorizontalGroup(
            omPanel_SellItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_SellItemLayout.createSequentialGroup()
                .addComponent(itemDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        omPanel_SellItemLayout.setVerticalGroup(
            omPanel_SellItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_SellItemLayout.createSequentialGroup()
                .addComponent(itemDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        item_AddAndReturnTabPanel.addTab("Compare Batch", omPanel_SellItem);

        omPanel_ReturnItem.setOpaque(false);

        omPanel_SellItem1.setOpaque(false);

        itemDetailPanel3.setOpaque(false);

        tablePanel5.setOpaque(false);

        omTable_FinalGRNTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Item Code", "Sub Item Name", "Batch Id", "Buying Price", "Selling Price", "Full Qty", "Received Qty", "Description", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_FinalGRNTable.setOpaque(false);
        jScrollPane6.setViewportView(omTable_FinalGRNTable);

        omLabel_itemDetailFullAmount3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailFullAmount3.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailFullAmount3.setText("Total Amount");
        omLabel_itemDetailFullAmount3.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_itemDetailRemoveItem1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailRemoveItem1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailRemoveItem1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailRemoveItem1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailRemoveItem1.setText("Remove Batch");
        omLabel_itemDetailRemoveItem1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailRemoveItem1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailRemoveItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailRemoveItem1MouseClicked(evt);
            }
        });

        omLabel_itemDetailConfirm2.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailConfirm2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailConfirm2.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailConfirm2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailConfirm2.setText("Confirm GRN");
        omLabel_itemDetailConfirm2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailConfirm2.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailConfirm2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailConfirm2MouseClicked(evt);
            }
        });

        omLabel_itemDetailFullAmountView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_itemDetailFullAmountView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_itemDetailFullAmountView.setText("0.00");
        omLabel_itemDetailFullAmountView.setOpaque(true);

        javax.swing.GroupLayout tablePanel5Layout = new javax.swing.GroupLayout(tablePanel5);
        tablePanel5.setLayout(tablePanel5Layout);
        tablePanel5Layout.setHorizontalGroup(
            tablePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(omLabel_itemDetailRemoveItem1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(omLabel_itemDetailConfirm2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(omLabel_itemDetailFullAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(omLabel_itemDetailFullAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(tablePanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        tablePanel5Layout.setVerticalGroup(
            tablePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_itemDetailFullAmountView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tablePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_itemDetailRemoveItem1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailConfirm2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailFullAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout itemDetailPanel3Layout = new javax.swing.GroupLayout(itemDetailPanel3);
        itemDetailPanel3.setLayout(itemDetailPanel3Layout);
        itemDetailPanel3Layout.setHorizontalGroup(
            itemDetailPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(tablePanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        itemDetailPanel3Layout.setVerticalGroup(
            itemDetailPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(tablePanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout omPanel_SellItem1Layout = new javax.swing.GroupLayout(omPanel_SellItem1);
        omPanel_SellItem1.setLayout(omPanel_SellItem1Layout);
        omPanel_SellItem1Layout.setHorizontalGroup(
            omPanel_SellItem1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(itemDetailPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        omPanel_SellItem1Layout.setVerticalGroup(
            omPanel_SellItem1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_SellItem1Layout.createSequentialGroup()
                .addComponent(itemDetailPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout omPanel_ReturnItemLayout = new javax.swing.GroupLayout(omPanel_ReturnItem);
        omPanel_ReturnItem.setLayout(omPanel_ReturnItemLayout);
        omPanel_ReturnItemLayout.setHorizontalGroup(
            omPanel_ReturnItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(omPanel_SellItem1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        omPanel_ReturnItemLayout.setVerticalGroup(
            omPanel_ReturnItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, omPanel_ReturnItemLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(omPanel_SellItem1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        item_AddAndReturnTabPanel.addTab("Final GRN", omPanel_ReturnItem);

        jPanel1.setOpaque(false);

        omPanel_GetSellItems1.setOpaque(false);

        itemDetailPanel2.setOpaque(false);

        omLabel_ReturnDetailReturn1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ReturnDetailReturn1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ReturnDetailReturn1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDetailReturn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ReturnDetailReturn1.setText("Return Item");
        omLabel_ReturnDetailReturn1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ReturnDetailReturn1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ReturnDetailReturn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ReturnDetailReturn1MouseClicked(evt);
            }
        });

        omTable_ReturnItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch ID", "Serial Number", "Item Code", "Batch Selling Price", "Status", "Return Description", "Return Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_ReturnItems.setOpaque(false);
        omTable_ReturnItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omTable_ReturnItemsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(omTable_ReturnItems);

        javax.swing.GroupLayout itemDetailPanel2Layout = new javax.swing.GroupLayout(itemDetailPanel2);
        itemDetailPanel2.setLayout(itemDetailPanel2Layout);
        itemDetailPanel2Layout.setHorizontalGroup(
            itemDetailPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1188, Short.MAX_VALUE)
                        .addContainerGap(162, Short.MAX_VALUE))
                    .addGroup(itemDetailPanel2Layout.createSequentialGroup()
                        .addComponent(omLabel_ReturnDetailReturn1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        itemDetailPanel2Layout.setVerticalGroup(
            itemDetailPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(omLabel_ReturnDetailReturn1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addGap(266, 266, 266))
        );

        javax.swing.GroupLayout omPanel_GetSellItems1Layout = new javax.swing.GroupLayout(omPanel_GetSellItems1);
        omPanel_GetSellItems1.setLayout(omPanel_GetSellItems1Layout);
        omPanel_GetSellItems1Layout.setHorizontalGroup(
            omPanel_GetSellItems1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, omPanel_GetSellItems1Layout.createSequentialGroup()
                .addComponent(itemDetailPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        omPanel_GetSellItems1Layout.setVerticalGroup(
            omPanel_GetSellItems1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_GetSellItems1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemDetailPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        omTab_ReturnTabbedPane1.addTab("All Returns To Supplier", omPanel_GetSellItems1);

        omPanel_ReturnItemPanel1.setOpaque(false);

        returnDetailPanel1.setOpaque(false);

        tablePanel4.setOpaque(false);

        omLabel_ReturnDetailOK1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ReturnDetailOK1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ReturnDetailOK1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDetailOK1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ReturnDetailOK1.setText("Confirm");
        omLabel_ReturnDetailOK1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ReturnDetailOK1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ReturnDetailOK1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ReturnDetailOK1MouseClicked(evt);
            }
        });

        omLabel_ReturnDetailRemove1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ReturnDetailRemove1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ReturnDetailRemove1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDetailRemove1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ReturnDetailRemove1.setText("Remove Item");
        omLabel_ReturnDetailRemove1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ReturnDetailRemove1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ReturnDetailRemove1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ReturnDetailRemove1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tablePanel4Layout = new javax.swing.GroupLayout(tablePanel4);
        tablePanel4.setLayout(tablePanel4Layout);
        tablePanel4Layout.setHorizontalGroup(
            tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel4Layout.createSequentialGroup()
                .addComponent(omLabel_ReturnDetailRemove1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(omLabel_ReturnDetailOK1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 93, Short.MAX_VALUE))
        );
        tablePanel4Layout.setVerticalGroup(
            tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(tablePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(omLabel_ReturnDetailRemove1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(omLabel_ReturnDetailOK1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );

        omTable_ReturnItemcConfirm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch ID", "Serial Number", "ItemCode", "Batch Selling Price", "Status", "Return Description", "Return Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_ReturnItemcConfirm.setOpaque(false);
        omTable_ReturnItemcConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omTable_ReturnItemcConfirmMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(omTable_ReturnItemcConfirm);

        javax.swing.GroupLayout returnDetailPanel1Layout = new javax.swing.GroupLayout(returnDetailPanel1);
        returnDetailPanel1.setLayout(returnDetailPanel1Layout);
        returnDetailPanel1Layout.setHorizontalGroup(
            returnDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnDetailPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablePanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(returnDetailPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1186, Short.MAX_VALUE)
                .addContainerGap())
        );
        returnDetailPanel1Layout.setVerticalGroup(
            returnDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnDetailPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout omPanel_ReturnItemPanel1Layout = new javax.swing.GroupLayout(omPanel_ReturnItemPanel1);
        omPanel_ReturnItemPanel1.setLayout(omPanel_ReturnItemPanel1Layout);
        omPanel_ReturnItemPanel1Layout.setHorizontalGroup(
            omPanel_ReturnItemPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_ReturnItemPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returnDetailPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        omPanel_ReturnItemPanel1Layout.setVerticalGroup(
            omPanel_ReturnItemPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_ReturnItemPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(returnDetailPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(245, Short.MAX_VALUE))
        );

        omTab_ReturnTabbedPane1.addTab("Confirm Returns", omPanel_ReturnItemPanel1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(omTab_ReturnTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(omTab_ReturnTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        item_AddAndReturnTabPanel.addTab("Return Items", jPanel1);

        jPanel2.setOpaque(false);

        paymentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        paymentPanel.setOpaque(false);

        omLabel_PaymentDate1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentDate1.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentDate1.setText("Cash");
        omLabel_PaymentDate1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentPayAmount1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentPayAmount1.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentPayAmount1.setText("Pay Amount");
        omLabel_PaymentPayAmount1.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_PaymentPayAmount1.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentPayAmount1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentPayAmount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentPayAmount1omLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_PaymentPayAmount1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                omText_PaymentPayAmount1KeyTyped(evt);
            }
        });

        omLabel_PaymentDate2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentDate2.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentDate2.setText("Cheque");
        omLabel_PaymentDate2.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentPayAmount2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentPayAmount2.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentPayAmount2.setText("Check Amount");
        omLabel_PaymentPayAmount2.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_PaymentPayAmount2.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentPayAmount2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentPayAmount2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentPayAmount2omLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_PaymentPayAmount2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                omText_PaymentPayAmount2KeyTyped(evt);
            }
        });

        omLabel_PaymentPayAmount3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentPayAmount3.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentPayAmount3.setText("Check Date");
        omLabel_PaymentPayAmount3.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_PaymentPayAmount3.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentPayAmount3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentPayAmount3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentPayAmount3omLabel_QtyViewActionPerformed(evt);
            }
        });

        omText_PaymentPayAmount4.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentPayAmount4.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentPayAmount4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentPayAmount4omLabel_QtyViewActionPerformed(evt);
            }
        });

        omLabel_PaymentPayAmount4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentPayAmount4.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentPayAmount4.setText("Check Number");
        omLabel_PaymentPayAmount4.setPreferredSize(new java.awt.Dimension(112, 23));

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_PaymentPayAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(omText_PaymentPayAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(paymentPanelLayout.createSequentialGroup()
                                    .addComponent(omLabel_PaymentPayAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(67, 67, 67)
                                    .addComponent(omText_PaymentPayAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(paymentPanelLayout.createSequentialGroup()
                                    .addComponent(omLabel_PaymentPayAmount2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(67, 67, 67)
                                    .addComponent(omText_PaymentPayAmount2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(paymentPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_PaymentPayAmount4, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(omText_PaymentPayAmount4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(omLabel_PaymentDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_PaymentDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addComponent(omLabel_PaymentDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_PaymentPayAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omText_PaymentPayAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(omLabel_PaymentDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(omText_PaymentPayAmount2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_PaymentPayAmount2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(omText_PaymentPayAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_PaymentPayAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(omText_PaymentPayAmount4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_PaymentPayAmount4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        omLabel_PaymentBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentBalance.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentBalance.setText("Balance");
        omLabel_PaymentBalance.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentPayAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentPayAmount.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentPayAmount.setText("Pay Amount");
        omLabel_PaymentPayAmount.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentNewBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentNewBalance.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentNewBalance.setText("New Balance");
        omLabel_PaymentNewBalance.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentNewBalanceView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_PaymentNewBalanceView.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_PaymentNewBalanceView.setOpaque(true);

        omText_PaymentPayAmount.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentPayAmount.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentPayAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentPayAmountomLabel_QtyViewActionPerformed(evt);
            }
        });

        omLabel_PaymentBalanceView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_PaymentBalanceView.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_PaymentBalanceView.setOpaque(true);

        omLabel_itemDetailConfirm1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailConfirm1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailConfirm1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailConfirm1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailConfirm1.setText("Pay ");
        omLabel_itemDetailConfirm1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailConfirm1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailConfirm1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailConfirm1MouseClicked(evt);
            }
        });

        omLabel_TotAmount.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_TotAmount.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_TotAmount.setText("GRN Tot Amount");
        omLabel_TotAmount.setPreferredSize(new java.awt.Dimension(112, 23));

        omLable_PaymentTotAmountView.setBackground(new java.awt.Color(204, 204, 204));
        omLable_PaymentTotAmountView.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLable_PaymentTotAmountView.setOpaque(true);

        omLabel_PaymentAccount.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentAccount.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentAccount.setText("Pay Account");
        omLabel_PaymentAccount.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_PaymentDate.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentDate.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_PaymentDate.setForeground(new java.awt.Color(51, 51, 51));
        omText_PaymentDate.setOpaque(true);

        omText_PaymentId.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentIdomLabel_QtyViewActionPerformed(evt);
            }
        });

        omLabel_PaymentId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentId.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentId.setText("Payment Id");
        omLabel_PaymentId.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentDate.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_PaymentDate.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentDate.setText("Payment Date");
        omLabel_PaymentDate.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_PaymentAccounts.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_PaymentAccounts.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        paymentPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        paymentPanel1.setOpaque(false);

        PaymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pay Id", "Date", "Method", "Check Num", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PaymentTable);

        omLabel_PaymentBalance1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentBalance1.setForeground(new java.awt.Color(0, 153, 153));
        omLabel_PaymentBalance1.setText("Total Payment");
        omLabel_PaymentBalance1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_TotalPayment.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_TotalPayment.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_TotalPayment.setText("0.00");
        omLabel_TotalPayment.setOpaque(true);

        javax.swing.GroupLayout paymentPanel1Layout = new javax.swing.GroupLayout(paymentPanel1);
        paymentPanel1.setLayout(paymentPanel1Layout);
        paymentPanel1Layout.setHorizontalGroup(
            paymentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(paymentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paymentPanel1Layout.createSequentialGroup()
                        .addComponent(omLabel_PaymentBalance1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(omLabel_TotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        paymentPanel1Layout.setVerticalGroup(
            paymentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paymentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_PaymentBalance1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_TotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(omLabel_PaymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(omText_PaymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(omLabel_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(omText_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(omLabel_TotAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(omLable_PaymentTotAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(omLabel_PaymentAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(omCombo_PaymentAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(omLabel_PaymentBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(omLabel_PaymentPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(50, 50, 50)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(omText_PaymentPayAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(omLabel_PaymentBalanceView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(omLabel_PaymentNewBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(omLabel_PaymentNewBalanceView, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addComponent(omLabel_itemDetailConfirm1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paymentPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_PaymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_PaymentId)
                            .addComponent(omLabel_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(omLabel_TotAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(omLable_PaymentTotAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(omText_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(omLabel_PaymentAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omCombo_PaymentAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(omLabel_PaymentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omLabel_PaymentBalanceView, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(omLabel_PaymentPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omText_PaymentPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(omLabel_PaymentNewBalanceView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omLabel_PaymentNewBalance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(omLabel_itemDetailConfirm1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(paymentPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(113, 113, 113))
        );

        item_AddAndReturnTabPanel.addTab("Payment", jPanel2);

        omLabel_CustomerId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_CustomerId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_CustomerId.setText("Supplier ID");
        omLabel_CustomerId.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_SupplierId.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_SupplierId.setEditable(true);
        omCombo_SupplierId.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omCombo_SupplierId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_SupplierIdActionPerformed(evt);
            }
        });

        omTextSupplierName.setBackground(new java.awt.Color(204, 204, 204));
        omTextSupplierName.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omTextSupplierName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        omTextSupplierName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omTextSupplierNameMouseClicked(evt);
            }
        });
        omTextSupplierName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omTextSupplierNameActionPerformed(evt);
            }
        });

        omLabel_CustomerName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_CustomerName.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_CustomerName.setText("Supplier Name");
        omLabel_CustomerName.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_OrdersId1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersId1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersId1.setText("Supplier NIC");
        omLabel_OrdersId1.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_SupplierNic.setBackground(new java.awt.Color(204, 204, 204));
        omText_SupplierNic.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_SupplierNic.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        omText_SupplierNic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_SupplierNicActionPerformed(evt);
            }
        });

        omLabel_OrdersId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersId.setText("Supply Order ID");
        omLabel_OrdersId.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_OrdersDateView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_OrdersDateView.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_OrdersDateView.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_OrdersDateView.setOpaque(true);

        omLabel_OrdersDate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersDate.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersDate.setText("Date");
        omLabel_OrdersDate.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_OrdersId1.setBackground(new java.awt.Color(204, 204, 204));
        omText_OrdersId1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_OrdersId1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_OrdersId1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(item_AddAndReturnTabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(omLabel_CustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_CustomerId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(invoicePanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(omCombo_SupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(omLabel_OrdersId1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(omText_SupplierNic, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(invoicePanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(omTextSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_OrdersDate, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_OrdersId, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omText_OrdersId1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_OrdersDateView, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_OrdersId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_OrdersId1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omLabel_OrdersDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_OrdersDateView, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omLabel_CustomerId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(omCombo_SupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omText_SupplierNic, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(omLabel_OrdersId1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_CustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omTextSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(item_AddAndReturnTabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );

        getContentPane().add(invoicePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 1250, 600));

        reasonLable.setForeground(new java.awt.Color(51, 51, 51));
        reasonLable.setText("No Discount");
        getContentPane().add(reasonLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 380, 30));

        MainLable.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\First Sem Project\\Omicron\\Omicron\\Omicron_Electronics\\src\\omicron.images\\final.jpg")); // NOI18N
        MainLable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(MainLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonLabelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeButtonLabelMouseClicked

    private void omText_SupplierNicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_SupplierNicActionPerformed
        boolean check = ValidationController.checkNic(omText_SupplierNic);
        if (check) {
            getCustomerDetailsFromCustomerNic();
        }

    }//GEN-LAST:event_omText_SupplierNicActionPerformed

    private void omText_QtyomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_QtyomLabel_QtyViewActionPerformed
        confirmOldBatchToFinalGRNTable();
    }//GEN-LAST:event_omText_QtyomLabel_QtyViewActionPerformed

    private void omTextSupplierNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omTextSupplierNameActionPerformed

    }//GEN-LAST:event_omTextSupplierNameActionPerformed

    private void omCombo_ItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_ItemCodeActionPerformed
        String itemCode = (String) omCombo_ItemCode.getSelectedItem();
        //JOptionPane.showMessageDialog(this, itemCode);

        if (itemCode != null) {
            getItemNameAndBatchIdToSelectedItemCode(itemCode);
        }
    }//GEN-LAST:event_omCombo_ItemCodeActionPerformed

    private void omCombo_ItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_ItemNameActionPerformed
        String itemName = (String) omCombo_ItemName.getSelectedItem();
        if (itemName != null) {
            getItemCodeAndBatchIdToSelectedItemName(itemName);
        }
    }//GEN-LAST:event_omCombo_ItemNameActionPerformed

    private void omCombo_SupplierIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_SupplierIdActionPerformed
        String supplierId = (String) omCombo_SupplierId.getSelectedItem();
        if (supplierId != null) {
            loadSupplierDetails(supplierId);
            loadItemIdsAndNames(supplierId);
            loadReturnItemsToOneSupplier(supplierId);
        }

    }//GEN-LAST:event_omCombo_SupplierIdActionPerformed

    private void omLabel_itemDetailRemoveItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailRemoveItemMouseClicked
        addNewBatchPanel.setVisible(true);
    }//GEN-LAST:event_omLabel_itemDetailRemoveItemMouseClicked

    private void omLable_SellingPriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLable_SellingPriceMouseClicked
//        String check = omLable_SellingPrice.getText();
//        if (!check.equals("")) {
//            int confirm = JOptionPane.showConfirmDialog(this, "Are you want to edit Unit Price??");
//            if (confirm == 0) {
//                String newUnitPrice = JOptionPane.showInputDialog("Imput your new Unit Price..");
//                omLable_SellingPrice.setText(newUnitPrice);
//                double unitPrice = Double.parseDouble(newUnitPrice);
//                if (unitPrice > 0) {
//                    String reason = JOptionPane.showInputDialog("Enter Reason to change Unit Price");
//                    reasonLable.setText(reason);
//                }
//            }
//        }
    }//GEN-LAST:event_omLable_SellingPriceMouseClicked

    private void omTextSupplierNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omTextSupplierNameMouseClicked

//        if (!omCheck_AlreadyMember.isSelected()) {
//            omText_CustomerName.setText("");
//        }
    }//GEN-LAST:event_omTextSupplierNameMouseClicked

    private void omText_OrdersId1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_OrdersId1ActionPerformed
        loadSupplyOrderDetailsToTable();
        setInvoicePayments();
    }//GEN-LAST:event_omText_OrdersId1ActionPerformed

    private void omTable_ReturnItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omTable_ReturnItemsMouseClicked
//        loadReturnsToConfirmReturnsTable();
    }//GEN-LAST:event_omTable_ReturnItemsMouseClicked

    private void omLabel_ReturnDetailReturn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ReturnDetailReturn1MouseClicked
        loadReturnsToConfirmReturnsTable();

    }//GEN-LAST:event_omLabel_ReturnDetailReturn1MouseClicked

    private void omLabel_ReturnDetailRemove1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ReturnDetailRemove1MouseClicked
        int selectedRow = omTable_ReturnItemcConfirm.getSelectedRow();
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_ReturnItemcConfirm.getModel();
        if (selectedRow >= 0) {
            defaultTableModel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please Select row first..");
        }
    }//GEN-LAST:event_omLabel_ReturnDetailRemove1MouseClicked

    private void omLabel_ReturnDetailOK1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ReturnDetailOK1MouseClicked
        confirmSupplyReturns();
    }//GEN-LAST:event_omLabel_ReturnDetailOK1MouseClicked

    private void omLabel_itemDetailRemoveItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailRemoveItem1MouseClicked
        int selectedRow = omTable_FinalGRNTable.getSelectedRow();
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_FinalGRNTable.getModel();
        if (selectedRow >= 0) {
            defaultTableModel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please Select row first..");
        }
    }//GEN-LAST:event_omLabel_itemDetailRemoveItem1MouseClicked

    private void omLabel_itemDetailConfirm2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailConfirm2MouseClicked
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_FinalGRNTable.getModel();
            double totAmount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());
            String willReceiveDate = omLabel_OrdersDateView.getText();
            String supply_orderId = omText_OrdersId1.getText();
            ArrayList<Batch> allBatchDetails = new ArrayList<>();
            ArrayList<GRN> allGrnDetails = new ArrayList<>();

            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String itemCode = (String) defaultTableModel.getValueAt(i, 0);
                String batchId = (String) defaultTableModel.getValueAt(i, 2);
                double buyingPrice = (double) defaultTableModel.getValueAt(i, 3);
                double sellingPrice = (double) defaultTableModel.getValueAt(i, 4);
                String desc = (String) defaultTableModel.getValueAt(i, 7);
                int qty = (int) defaultTableModel.getValueAt(i, 5);
                allBatchDetails.add(new Batch(itemCode, batchId, buyingPrice, sellingPrice, desc, qty));

                int receiverQty = (int) defaultTableModel.getValueAt(i, 6);
                double amount = (double) defaultTableModel.getValueAt(i, 8);
                allGrnDetails.add(new GRN(batchId, supply_orderId, receiverQty, amount));
            }

            Supply_Order allSupply_Order = new Supply_Order(supply_orderId, totAmount, willReceiveDate, allBatchDetails, allGrnDetails);

            boolean confirmOrNot = Supply_OrderController.updateSupply_OrderTableAndintoGRNTableAndBatchTable(allSupply_Order);

            if (confirmOrNot) {
                JOptionPane.showMessageDialog(this, "GRN Succfully Added..");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_omLabel_itemDetailConfirm2MouseClicked

    private void omCombo_AddItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_AddItemNameActionPerformed
        String itemName = (String) omCombo_AddItemName.getSelectedItem();
        if (itemName != null) {
            getItemCodeAndBatchIdToNewSelectedItemName(itemName);
        }
    }//GEN-LAST:event_omCombo_AddItemNameActionPerformed

    private void omCombo_AddItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_AddItemCodeActionPerformed
        String itemCode = (String) omCombo_AddItemCode.getSelectedItem();
        //JOptionPane.showMessageDialog(this, itemCode);

        if (itemCode != null) {
            getItemNameAndBatchIdToNewSelectedItemCode(itemCode);
        }
    }//GEN-LAST:event_omCombo_AddItemCodeActionPerformed

    private void omText_Qty3omLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_Qty3omLabel_QtyViewActionPerformed
        addNewBatchPanel.setVisible(false);
        confirmNewBatchToFinalGRNTable();
    }//GEN-LAST:event_omText_Qty3omLabel_QtyViewActionPerformed

    private void omTable_OrderItemDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omTable_OrderItemDetailMouseClicked
        loadDetailsToLablesFromTable();
    }//GEN-LAST:event_omTable_OrderItemDetailMouseClicked

    private void omText_AddSellingPriceomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_AddSellingPriceomLabel_QtyViewActionPerformed
        boolean check = ValidationController.priceText(omText_AddSellingPrice);
        if (check) {
            omText_Qty3.requestFocus();
        }
    }//GEN-LAST:event_omText_AddSellingPriceomLabel_QtyViewActionPerformed

    private void omText_AddBuyingPriceomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_AddBuyingPriceomLabel_QtyViewActionPerformed
        boolean check = ValidationController.priceText(omText_AddBuyingPrice);
        if (check) {
            omText_AddSellingPrice.requestFocus();
        }
    }//GEN-LAST:event_omText_AddBuyingPriceomLabel_QtyViewActionPerformed

    private void omTable_ReturnItemcConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omTable_ReturnItemcConfirmMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_omTable_ReturnItemcConfirmMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void omText_PaymentPayAmountomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmountomLabel_QtyViewActionPerformed
        newBalance();
    }//GEN-LAST:event_omText_PaymentPayAmountomLabel_QtyViewActionPerformed

    private void omLabel_itemDetailConfirm1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailConfirm1MouseClicked
        omText_PaymentPayAmount1.setText("0.00");
        intoSup_PaymentTable();
        clearAll();
        setInvoicePayments();
    }//GEN-LAST:event_omLabel_itemDetailConfirm1MouseClicked

    private void omText_PaymentIdomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentIdomLabel_QtyViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_omText_PaymentIdomLabel_QtyViewActionPerformed

    private void omText_PaymentPayAmount1omLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmount1omLabel_QtyViewActionPerformed
        boolean check = ValidationController.priceText(omText_PaymentPayAmount1);
        if (check) {
            double payAmount = Double.parseDouble(omText_PaymentPayAmount1.getText());
            omText_PaymentPayAmount.setText(Double.toString(payAmount));
            newBalance();
        }
    }//GEN-LAST:event_omText_PaymentPayAmount1omLabel_QtyViewActionPerformed

    private void omText_PaymentPayAmount2omLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmount2omLabel_QtyViewActionPerformed
        boolean check = ValidationController.priceText(omText_PaymentPayAmount2);
        if (check) {
            double payAmount = Double.parseDouble(omText_PaymentPayAmount2.getText());
            omText_PaymentPayAmount.setText(Double.toString(payAmount));
            newBalance();
        }
    }//GEN-LAST:event_omText_PaymentPayAmount2omLabel_QtyViewActionPerformed

    private void omText_PaymentPayAmount3omLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmount3omLabel_QtyViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_omText_PaymentPayAmount3omLabel_QtyViewActionPerformed

    private void omText_PaymentPayAmount4omLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmount4omLabel_QtyViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_omText_PaymentPayAmount4omLabel_QtyViewActionPerformed

    private void omText_QtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_QtyKeyPressed
        ValidationController.vailidateQty(omText_Qty);
    }//GEN-LAST:event_omText_QtyKeyPressed

    private void omText_QtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_QtyKeyReleased
        ValidationController.vailidateQty(omText_Qty);
    }//GEN-LAST:event_omText_QtyKeyReleased

    private void omText_AddBuyingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_AddBuyingPriceKeyPressed
//        ValidationController.priceText(omText_AddBuyingPrice);
    }//GEN-LAST:event_omText_AddBuyingPriceKeyPressed

    private void omText_AddBuyingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_AddBuyingPriceKeyReleased
//        ValidationController.priceText(omText_AddBuyingPrice);
    }//GEN-LAST:event_omText_AddBuyingPriceKeyReleased

    private void omText_AddSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_AddSellingPriceKeyPressed
//        ValidationController.priceText(omText_AddSellingPrice);
    }//GEN-LAST:event_omText_AddSellingPriceKeyPressed

    private void omText_AddSellingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_AddSellingPriceKeyReleased
//        ValidationController.priceText(omText_AddSellingPrice);
    }//GEN-LAST:event_omText_AddSellingPriceKeyReleased

    private void omText_Qty3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_Qty3KeyPressed
        ValidationController.vailidateQty(omText_Qty3);
    }//GEN-LAST:event_omText_Qty3KeyPressed

    private void omText_Qty3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_Qty3KeyReleased
        ValidationController.vailidateQty(omText_Qty3);
    }//GEN-LAST:event_omText_Qty3KeyReleased

    private void omText_AddBuyingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_AddBuyingPriceKeyTyped
        ValidationController.NumbersAndDotOnly(evt);
    }//GEN-LAST:event_omText_AddBuyingPriceKeyTyped

    private void omText_AddSellingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_AddSellingPriceKeyTyped
        ValidationController.NumbersAndDotOnly(evt);
    }//GEN-LAST:event_omText_AddSellingPriceKeyTyped

    private void omText_PaymentPayAmount1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmount1KeyTyped
        ValidationController.NumbersAndDotOnly(evt);
    }//GEN-LAST:event_omText_PaymentPayAmount1KeyTyped

    private void omText_PaymentPayAmount2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmount2KeyTyped
        ValidationController.NumbersAndDotOnly(evt);
    }//GEN-LAST:event_omText_PaymentPayAmount2KeyTyped

    private void minimizeButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeButtonLabelMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeButtonLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GRNManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GRNManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GRNManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GRNManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GRNManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MainLable;
    private javax.swing.JTable PaymentTable;
    private javax.swing.JPanel addNewBatchPanel;
    private javax.swing.JLabel clock;
    private javax.swing.JPanel clockPanel;
    private javax.swing.JLabel closeButtonLabel;
    private javax.swing.JPanel homeIconPanel;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JPanel itemDetailPanel;
    private javax.swing.JPanel itemDetailPanel2;
    private javax.swing.JPanel itemDetailPanel3;
    private javax.swing.JTabbedPane item_AddAndReturnTabPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel mainButtonPanel;
    private javax.swing.JLabel minimizeButtonLabel;
    private javax.swing.JComboBox<String> omCombo_AddItemCode;
    private javax.swing.JComboBox<String> omCombo_AddItemName;
    private javax.swing.JComboBox<String> omCombo_ItemCode;
    private javax.swing.JComboBox<String> omCombo_ItemName;
    private javax.swing.JComboBox<String> omCombo_PaymentAccounts;
    private javax.swing.JComboBox<String> omCombo_SupplierId;
    private javax.swing.JLabel omLabel_AddDesc;
    private javax.swing.JLabel omLabel_AvailableQty;
    private javax.swing.JLabel omLabel_BatchId1;
    private javax.swing.JLabel omLabel_BatchId6;
    private javax.swing.JLabel omLabel_BuyingPrice;
    private javax.swing.JLabel omLabel_CustomerId;
    private javax.swing.JLabel omLabel_CustomerName;
    private javax.swing.JLabel omLabel_FullQty1;
    private javax.swing.JLabel omLabel_FullQty4;
    private javax.swing.JLabel omLabel_FullQtyView1;
    private javax.swing.JLabel omLabel_ItemCode1;
    private javax.swing.JLabel omLabel_ItemCode8;
    private javax.swing.JLabel omLabel_ItemDescription1;
    private javax.swing.JLabel omLabel_ItemDescription5;
    private javax.swing.JLabel omLabel_ItemName1;
    private javax.swing.JLabel omLabel_ItemName6;
    private javax.swing.JLabel omLabel_LastBatchId;
    private javax.swing.JLabel omLabel_NewBatchId;
    private javax.swing.JLabel omLabel_OrdersDate;
    private javax.swing.JLabel omLabel_OrdersDateView;
    private javax.swing.JLabel omLabel_OrdersId;
    private javax.swing.JLabel omLabel_OrdersId1;
    private javax.swing.JLabel omLabel_PaymentAccount;
    private javax.swing.JLabel omLabel_PaymentBalance;
    private javax.swing.JLabel omLabel_PaymentBalance1;
    private javax.swing.JLabel omLabel_PaymentBalanceView;
    private javax.swing.JLabel omLabel_PaymentDate;
    private javax.swing.JLabel omLabel_PaymentDate1;
    private javax.swing.JLabel omLabel_PaymentDate2;
    private javax.swing.JLabel omLabel_PaymentId;
    private javax.swing.JLabel omLabel_PaymentNewBalance;
    private javax.swing.JLabel omLabel_PaymentNewBalanceView;
    private javax.swing.JLabel omLabel_PaymentPayAmount;
    private javax.swing.JLabel omLabel_PaymentPayAmount1;
    private javax.swing.JLabel omLabel_PaymentPayAmount2;
    private javax.swing.JLabel omLabel_PaymentPayAmount3;
    private javax.swing.JLabel omLabel_PaymentPayAmount4;
    private javax.swing.JLabel omLabel_Qty1;
    private javax.swing.JLabel omLabel_Qty5;
    private javax.swing.JLabel omLabel_QtyOnHand1;
    private javax.swing.JLabel omLabel_QtyOnHand4;
    private javax.swing.JLabel omLabel_QtyOnHandView4;
    private javax.swing.JLabel omLabel_ReturnDetailOK1;
    private javax.swing.JLabel omLabel_ReturnDetailRemove1;
    private javax.swing.JLabel omLabel_ReturnDetailReturn1;
    private javax.swing.JLabel omLabel_TotAmount;
    private javax.swing.JLabel omLabel_TotalPayment;
    private javax.swing.JLabel omLabel_UnitPrice;
    private javax.swing.JLabel omLabel_UnitPrice4;
    private javax.swing.JLabel omLabel_itemDetailConfirm1;
    private javax.swing.JLabel omLabel_itemDetailConfirm2;
    private javax.swing.JLabel omLabel_itemDetailFullAmount3;
    private javax.swing.JLabel omLabel_itemDetailFullAmountView;
    private javax.swing.JLabel omLabel_itemDetailRemoveItem;
    private javax.swing.JLabel omLabel_itemDetailRemoveItem1;
    private javax.swing.JLabel omLable_PaymentTotAmountView;
    private javax.swing.JLabel omLable_SellingPrice;
    private javax.swing.JPanel omPanel_GetSellItems1;
    private javax.swing.JPanel omPanel_ReturnItem;
    private javax.swing.JPanel omPanel_ReturnItemPanel1;
    private javax.swing.JPanel omPanel_SellItem;
    private javax.swing.JPanel omPanel_SellItem1;
    private javax.swing.JTabbedPane omTab_ReturnTabbedPane1;
    private javax.swing.JTable omTable_FinalGRNTable;
    private javax.swing.JTable omTable_OrderItemDetail;
    private javax.swing.JTable omTable_ReturnItemcConfirm;
    private javax.swing.JTable omTable_ReturnItems;
    private javax.swing.JTextField omTextSupplierName;
    private javax.swing.JTextField omText_AddBuyingPrice;
    private javax.swing.JTextField omText_AddSellingPrice;
    private javax.swing.JTextField omText_OrdersId1;
    private javax.swing.JLabel omText_PaymentDate;
    private javax.swing.JTextField omText_PaymentId;
    private javax.swing.JTextField omText_PaymentPayAmount;
    private javax.swing.JTextField omText_PaymentPayAmount1;
    private javax.swing.JTextField omText_PaymentPayAmount2;
    private javax.swing.JTextField omText_PaymentPayAmount3;
    private javax.swing.JTextField omText_PaymentPayAmount4;
    private javax.swing.JTextField omText_Qty;
    private javax.swing.JTextField omText_Qty3;
    private javax.swing.JTextField omText_SupplierNic;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JPanel paymentPanel1;
    private javax.swing.JLabel reasonLable;
    private javax.swing.JPanel returnDetailPanel1;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JPanel tablePanel4;
    private javax.swing.JPanel tablePanel5;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables

    private void getClock() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    Date curDate = new Date();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss aa");
                    String currentTime = dateFormat.format(curDate);

                    clock.setText(currentTime);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
//                        JOptionPane.showMessageDialog(RoomDetails.this, "Database Error...");
                    }
                }
            }
        }).start();
    }

//    private void removeSameItems() {
//        for (int i = 0; i < omCombo_ItemName.getItemCount(); i++) {
//            for (int j = 0; j <omCombo_ItemName.getItemCount(); j++) {
//                if (omCombo_ItemName.getItemAt(i)==omCombo_ItemName.getItemAt(j)) {
//
//                    omCombo_ItemName.removeItemAt(j);
//                }
//            }
//        }
//    }
    private void setOrderDate() {

        Date d1 = new Date(); //Current System date
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        String sDate = df.format(cal.getTime());
        omLabel_OrdersDateView.setText(sDate);
        omLabel_AddDesc.setText(sDate);
        omText_PaymentDate.setText(sDate);
        //omText_PaymentDate.setText(sDate);
//        omLabel_ReturnDateView.setText(sDate);
    }

//    private void setInvoicePayments() {
//        try {
//            String orderId = omText_OrdersId.getText();
//          //  omLable_PaymentTotAmountView.setText(omLabel_itemDetailFullAmountView.getText());
//            ArrayList<Payment> allPaymentIdsDetails = new ArrayList<Payment>();
//            allPaymentIdsDetails = PaymentController.getInvoicePayment(orderId);
//            double allPayment = 0;
//            for (Payment allPaymentIdsDetail : allPaymentIdsDetails) {
//                allPayment += allPaymentIdsDetail.getPaymentAmount();
//            }
//           // double totAmount = Double.parseDouble(omLable_PaymentTotAmountView.getText());
//            double balance = totAmount - allPayment;
//
//            omLabel_PaymentBalanceView.setText(Double.toString(balance));
////
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(GRNManagement.class
//                    .getName()).log(Level.SEVERE, null, ex);
//
//        } catch (SQLException ex) {
//            Logger.getLogger(GRNManagement.class
//                    .getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    private void getCustomerDetailsFromCustomerNic() {

        try {
            String SupplierNic = omText_SupplierNic.getText();
            Supplier allDetailsAboutOneSupplier = SupplierController.getSupplierDetailsToNic(SupplierNic);
            if (allDetailsAboutOneSupplier != null) {
                omCombo_SupplierId.setSelectedItem(allDetailsAboutOneSupplier.getSupplierId());
                omTextSupplierName.setText(allDetailsAboutOneSupplier.getSupplierName());
            } else {
                int confirm = JOptionPane.showConfirmDialog(this, "No Supplier Found.. Are You want to add new Supplier??..");
                if (confirm == 0) {

                    new SupplierManagement(SupplierNic).setVisible(true);

                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

//    private void loadAccounts() {
//        try {
//            ArrayList<Account> allAccounts = AccountController.loadAllAccounts();
//            for (Account account : allAccounts) {
//                omCombo_PaymentAccounts.addItem(account.getAccountName());
//            }
//            omCombo_PaymentAccounts.setSelectedItem("Income Account");
//
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(GRNManagement.class
//                    .getName()).log(Level.SEVERE, null, ex);
//
//        } catch (SQLException ex) {
//            Logger.getLogger(GRNManagement.class
//                    .getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    private void clearForNextInvoice() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
        defaultTableModel.setRowCount(0);
        omText_SupplierNic.setText("");
        omTextSupplierName.setText("");
        omLabel_BuyingPrice.setText("");
        omLabel_FullQtyView1.setText("");
        omLable_SellingPrice.setText("");
        omLabel_AvailableQty.setText("");
        omText_Qty.setText("");
    }

//    private void clearForNextPayment() {
//        omLable_PaymentTotAmountView.setText("");
//        omLabel_PaymentBalanceView.setText("");
//        omText_PaymentPayAmount.setText("");
//        omLabel_PaymentNewBalanceView.setText("");
//    }
    private void getOrdersAndOrder_DetailDetails(JTable tableName) {
//        try {
//            String ordersId = omText_OrdersId.getText();
//            Orders orders = OrdersController.getAllOrderAndOrder_DetailDetails(ordersId);
//            DefaultTableModel defaultTableModel = (DefaultTableModel) tableName.getModel();
//            defaultTableModel.setRowCount(0);
//            if (orders != null) {
//                omText_CustomerName.setText(orders.getCustomerName());
//                omText_CustomerName.setEditable(false);
//                omText_CstomerNic.setEditable(false);
////                omLabel_ItemCode.setText("");
////                omLabel_FullQtyView1.setText("");
////                omTextl_UnitPrice.setText("");
////                omLabel_QtyOnHandView.setText("");
////                omText_Qty.setText("");
//                omLabel_OrdersDateView.setText(orders.getOrdersDate());
//                omLabel_itemDetailFullAmountView.setText(Double.toString(orders.getOrdersTot_Amount()));
//                omLabel_itemDetailFullAmountView.setEnabled(false);
////                omLabel_itemDetailFullAmountView1.setText(Double.toString(orders.getOrdersTot_Amount()));
////                omLabel_itemDetailFullAmountView1.setEnabled(false);
//                omCombo_CustomerId.setSelectedItem(orders.getCustomerId());
//                omCombo_CustomerId.setEnabled(false);
//
//                for (Order_Detail oneOrder_Oetail : orders.getOrderDetailList()) {
//                    Item itemDetails = ItemController.getFromItemTable(oneOrder_Oetail.getItemCode());
//                    String itemDescription = itemDetails.getItemName();
//                    double unitPrice = oneOrder_Oetail.getOrder_detailSellingPrice();
//                    int qty = oneOrder_Oetail.getOrder_detailQty();
//                    double amount = unitPrice * qty;
//                    Object[] rowData = {oneOrder_Oetail.getItemCode(), itemDescription, oneOrder_Oetail.getBatchId(), unitPrice, oneOrder_Oetail.getOrder_detailReason(), qty, amount};
//                    defaultTableModel.addRow(rowData);
//                }
//            } else {
//                clearForNextInvoice();
//                omLabel_itemDetailFullAmountView.setEnabled(true);
//                omCombo_CustomerId.setEnabled(true);
//                omLabel_itemDetailFullAmountView.setText("0.00");
////                omLabel_itemDetailFullAmountView1.setText("0.00");
//                omText_OrdersId.setText(ordersId);
//
//            }
//
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(GRNManagement.class
//                    .getName()).log(Level.SEVERE, null, ex);
//
//        } catch (SQLException ex) {
//            Logger.getLogger(GRNManagement.class
//                    .getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private void loadSupplierIds() {
        try {
            ArrayList<Supplier> supplierIds = SupplierController.getSupplierIdsToCombo();
            for (Supplier supplierId : supplierIds) {
                omCombo_SupplierId.addItem(supplierId.getSupplierId());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadSupplierDetails(String supplierId) {
        try {
            Supplier supplterDetail = SupplierController.getFromSupplierTable(supplierId);
            omText_SupplierNic.setText(supplterDetail.getSupplierNic());
            omTextSupplierName.setText(supplterDetail.getSupplierName());
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadItemIdsAndNames(String supplierId) {
        omCombo_ItemCode.removeAllItems();
        omCombo_ItemName.removeAllItems();
        omCombo_AddItemName.removeAllItems();
        omCombo_AddItemCode.removeAllItems();

        try {
            ArrayList<Item> itemIds = ItemController.getItemIdsToOneSupplier(supplierId);
            for (Item item : itemIds) {
                omCombo_ItemCode.addItem(item.getItemCode());
                omCombo_AddItemCode.addItem(item.getItemCode());
                omCombo_ItemName.addItem(item.getItemName());
                omCombo_AddItemName.addItem(item.getItemName());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getItemNameAndBatchIdToSelectedItemCode(String itemCode) {
        try {

            Item item = ItemController.getFromItemTable(itemCode);
            String itemName = item.getItemName();
            omCombo_ItemName.setSelectedItem(itemName);

            Batch batch = BatchController.getLastBatchIdToSelectedItemCode(itemCode);

            if (batch != null) {
                omLabel_LastBatchId.setText(batch.getBatchId());
                omLabel_BuyingPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
                omLable_SellingPrice.setText(Double.toString(batch.getBatchSellingPrice()));
                omLabel_FullQtyView1.setText(batch.getBatchDescription());
//                somTextl_UnitPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
                omLabel_AvailableQty.setText(Integer.toString(batch.getBatchQty()));
            } else {
                // JOptionPane.showMessageDialog(this, "You still never bought this item..");
                omLabel_LastBatchId.setText("");
//                somTextl_UnitPrice.setText("");
                omLabel_AvailableQty.setText("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getItemCodeAndBatchIdToSelectedItemName(String itemName) {
        try {
            String itemCode = ItemController.getItemCodeToItemName(itemName);
            omCombo_ItemCode.setSelectedItem(itemCode);
//            omCombo_AddItemCode.setSelectedItem(itemCode);

            Batch batch = BatchController.getLastBatchIdToSelectedItemCode(itemCode);

            if (batch != null) {
                omLabel_LastBatchId.setText(batch.getBatchId());
//                somTextl_UnitPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
                omLabel_AvailableQty.setText(Integer.toString(batch.getBatchQty()));
            } else {
                //   JOptionPane.showMessageDialog(this, "You still never bought this item..");
                omLabel_LastBatchId.setText("");
                //             somTextl_UnitPrice.setText("");
                omLabel_AvailableQty.setText("");
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadSupplyOrderDetailsToTable() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
            defaultTableModel.setRowCount(0);
            String orderId = omText_OrdersId1.getText();
            Supply_Order allOrderDetails = Supply_OrderController.getSupplyOrderDetailsToOneId(orderId);
            if (allOrderDetails != null) {
                omCombo_SupplierId.setSelectedItem(allOrderDetails.getSupplierId());
                omLable_PaymentTotAmountView.setText(Double.toString(allOrderDetails.getSupply_orderTotAmount()));
                ArrayList<Supply_Order_Detail> orderDetailArray = allOrderDetails.getSupply_Order_Details();

                for (Supply_Order_Detail supply_Order_Detail : orderDetailArray) {
                    String itemCode = supply_Order_Detail.getItemCode();
                    Item item = ItemController.getFromItemTable(itemCode);
                    String subItemName = item.getItemName();
                    String lastbatchId = supply_Order_Detail.getBatchId();
                    Batch batchDetails = BatchController.getFromBatchTable(lastbatchId);
                    double buyingPrice = batchDetails.getBatchBuyingPrice();
                    double sellingPrice = batchDetails.getBatchSellingPrice();
                    int availableQty = batchDetails.getBatchQty();
                    int requestQty = supply_Order_Detail.getSupply_order_detailRequestQty();
                    String desc = batchDetails.getBatchDescription();

                    Object[] rowData = {itemCode, subItemName, lastbatchId, buyingPrice, sellingPrice, availableQty, requestQty, desc};
                    defaultTableModel.addRow(rowData);
                }
            } else {
                omText_OrdersId1.setText(orderId);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadDetailsToLablesFromTable() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
        int selectRow = omTable_OrderItemDetail.getSelectedRow();

        String itemCode = (String) defaultTableModel.getValueAt(selectRow, 0);
        String subItemName = (String) defaultTableModel.getValueAt(selectRow, 1);
        String lastbatchId = (String) defaultTableModel.getValueAt(selectRow, 2);
        double buyingPrice = (double) defaultTableModel.getValueAt(selectRow, 3);
        double sellingPrice = (double) defaultTableModel.getValueAt(selectRow, 4);;
        int availableQty = (int) defaultTableModel.getValueAt(selectRow, 5);
        int requestQty = (int) defaultTableModel.getValueAt(selectRow, 6);
        String desc = (String) defaultTableModel.getValueAt(selectRow, 7);

        omCombo_ItemName.setSelectedItem(subItemName);
        omCombo_AddItemName.setSelectedItem(subItemName);
        omCombo_ItemCode.setSelectedItem(itemCode);
        omCombo_AddItemCode.setSelectedItem(itemCode);
        omLabel_LastBatchId.setText(lastbatchId);
        omLabel_FullQtyView1.setText(desc);
        omLabel_BuyingPrice.setText(Double.toString(buyingPrice));
        omLable_SellingPrice.setText(Double.toString(sellingPrice));
        omLabel_AvailableQty.setText(Integer.toString(availableQty));

    }

    private void confirmOldBatchToFinalGRNTable() {
        double fullAmount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());

        String subItemName = (String) omCombo_ItemName.getSelectedItem();
        String subItemCode = (String) omCombo_ItemCode.getSelectedItem();
        String batchId = omLabel_LastBatchId.getText();
        String desc = omLabel_OrdersDateView.getText();
        double buyingPrice = Double.parseDouble(omLabel_BuyingPrice.getText());
        double sellingPrice = Double.parseDouble(omLable_SellingPrice.getText());
        int availableQty = Integer.parseInt(omLabel_AvailableQty.getText());
        int receivedQty = Integer.parseInt(omText_Qty.getText());
        int fullQty = availableQty + receivedQty;

        double amount = receivedQty * buyingPrice;
        fullAmount += amount;
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_FinalGRNTable.getModel();

        Object[] rowData = {subItemCode, subItemName, batchId, buyingPrice, sellingPrice, fullQty, receivedQty, desc, amount};
        defaultTableModel.addRow(rowData);
        omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
        omText_Qty.setText("");

        JOptionPane.showMessageDialog(this, "You have entered " + receivedQty + " Qty to \nBatchId:- " + batchId + "\nSub Item Name:- " + subItemName);

    }

    private void confirmNewBatchToFinalGRNTable() {
        double fullAmount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());

        String subItemName = (String) omCombo_AddItemName.getSelectedItem();
        String subItemCode = (String) omCombo_AddItemCode.getSelectedItem();
        String batchId = omLabel_NewBatchId.getText();
        String desc = omLabel_AddDesc.getText();
        double buyingPrice = Double.parseDouble(omText_AddBuyingPrice.getText());
        double sellingPrice = Double.parseDouble(omText_AddSellingPrice.getText());
        int receivedQty = Integer.parseInt(omText_Qty3.getText());
        int fullQty = receivedQty;

        double amount = receivedQty * buyingPrice;
        fullAmount += amount;
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_FinalGRNTable.getModel();

        Object[] rowData = {subItemCode, subItemName, batchId, buyingPrice, sellingPrice, fullQty, receivedQty, desc, amount};
        defaultTableModel.addRow(rowData);
        omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
        omText_Qty3.setText("");

        JOptionPane.showMessageDialog(this, "You have entered " + receivedQty + " Qty to \n new BatchId:- " + batchId + "\nSub Item Name:- " + subItemName);
    }

    private void loadReturnItemsToOneSupplier(String supplierId) {
        try {
            ArrayList<Sup_Returns> allReturnsToOneSupplier = Sup_ReturnsController.getAllReturnsToOneSupplier(supplierId);
            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_ReturnItems.getModel();
            defaultTableModel.setRowCount(0);
            for (Sup_Returns sup_Returns : allReturnsToOneSupplier) {
                Object[] rowData = {sup_Returns.getBatchId(), sup_Returns.getSerial_num(), sup_Returns.getItemCode(), sup_Returns.getBatchSellingPrice(), sup_Returns.getStatus(), sup_Returns.getReturnDescription(), sup_Returns.getReturnDate()};
                defaultTableModel.addRow(rowData);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadReturnsToConfirmReturnsTable() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_ReturnItems.getModel();
        int selectedRow = omTable_ReturnItems.getSelectedRow();
        String batchId = (String) defaultTableModel.getValueAt(selectedRow, 0);
        String serialNum = (String) defaultTableModel.getValueAt(selectedRow, 1);
        String itemCode = (String) defaultTableModel.getValueAt(selectedRow, 2);
        double batchSellingPrice = (double) defaultTableModel.getValueAt(selectedRow, 3);
        String status = (String) defaultTableModel.getValueAt(selectedRow, 4);
        String returnDesc = (String) defaultTableModel.getValueAt(selectedRow, 5);
        String returnDate = (String) defaultTableModel.getValueAt(selectedRow, 6);

        Object[] rowData = {batchId, serialNum, itemCode, batchSellingPrice, status, returnDesc, returnDate};
        DefaultTableModel model = (DefaultTableModel) omTable_ReturnItemcConfirm.getModel();

        model.addRow(rowData);
        defaultTableModel.removeRow(selectedRow);
    }

    private void confirmSupplyReturns() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_ReturnItemcConfirm.getModel();
            ArrayList<Sup_Returns> allSup_ReturnsToConfirm = new ArrayList<>();

            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String supplierId = (String) omCombo_SupplierId.getSelectedItem();
                String batchId = (String) defaultTableModel.getValueAt(i, 0);
                String serialNum = (String) defaultTableModel.getValueAt(i, 1);
                String itemCode = (String) defaultTableModel.getValueAt(i, 2);
                double batchSellingPrice = (double) defaultTableModel.getValueAt(i, 3);
                String status = (String) defaultTableModel.getValueAt(i, 4);
                String returnDesc = (String) defaultTableModel.getValueAt(i, 5);
                String returnDate = omLabel_OrdersDateView.getText();

                allSup_ReturnsToConfirm.add(new Sup_Returns(supplierId, batchId, serialNum, itemCode, batchSellingPrice, status, returnDesc, returnDate));
            }

            boolean updateSup_ReturnsTable = Sup_ReturnsController.modifyStatesInSup_ReturnsTable(allSup_ReturnsToConfirm);
            if (updateSup_ReturnsTable) {
                JOptionPane.showMessageDialog(this, "Supplier Returns Confirmed Successfully..");
                defaultTableModel.setRowCount(0);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your inserted data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadAccounts() {

        try {
            ArrayList<Account> allAccounts = AccountController.loadAllAccounts();
            for (Account account : allAccounts) {
                omCombo_PaymentAccounts.addItem(account.getAccountName());
            }
            omCombo_PaymentAccounts.setSelectedItem("Income Account");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void setInvoicePayments() {
        try {
            String supply_orderId = omText_OrdersId1.getText();
            DefaultTableModel defaultTableModel = (DefaultTableModel) PaymentTable.getModel();
            defaultTableModel.setRowCount(0);
            ArrayList<Sup_Payment> allSupplyPayments = Sup_PaymentController.getPaymentsDetailsToOneSOID(supply_orderId);
            double totPayment = 0;

            for (Sup_Payment allSupplyPayment : allSupplyPayments) {
                String paymentId = allSupplyPayment.getSup_paymentId();
                String paymentDate = allSupplyPayment.getSup_paymentDate();
                String method = allSupplyPayment.getSup_paymentMethod();
                double amount = allSupplyPayment.getSup_paymentAmount();
                totPayment += amount;
                String checkNumber = allSupplyPayment.getSup_paymentCheckNumber();

                Object[] rowData = {paymentId, paymentDate, method, checkNumber, amount};
                defaultTableModel.addRow(rowData);
            }

            double grnTotAmount = Double.parseDouble(omLable_PaymentTotAmountView.getText());
            double balance = grnTotAmount - totPayment;
            omLabel_TotalPayment.setText(Double.toString(totPayment));
            omLabel_PaymentBalanceView.setText(Double.toString(balance));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
//        } catch (NumberFormatException ex) {
//            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
//            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (NullPointerException ex) {
//            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
//            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private void payment() {
        double balance = Double.parseDouble(omLabel_PaymentBalanceView.getText());
        double payAmount = Double.parseDouble(omText_PaymentPayAmount.getText());
        double newBalance = balance - payAmount;
        omLabel_PaymentNewBalanceView.setText(Double.toString(newBalance));

    }

    private void intoSup_PaymentTable() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) PaymentTable.getModel();
            double amount = 0;
            amount = Double.parseDouble(omText_PaymentPayAmount1.getText());
            String sup_paymentMethod;
            if (amount != 0.00) {
                sup_paymentMethod = "Cash Payment";
            } else {
                sup_paymentMethod = "Cheque Payment";
            }
            String supply_orderId = omText_OrdersId1.getText();
            String sup_paymentId = omText_PaymentId.getText();
            String sup_paymentDate = omText_PaymentDate.getText();

            String sup_paymentCheckDate = omText_PaymentPayAmount3.getText();
            String sup_paymentCheckNumber = omText_PaymentPayAmount4.getText();
            double sup_paymentAmount = Double.parseDouble(omText_PaymentPayAmount.getText());

            String account = (String) omCombo_PaymentAccounts.getSelectedItem();

            Sup_Payment payment = new Sup_Payment(supply_orderId, sup_paymentId, sup_paymentDate, sup_paymentMethod, sup_paymentCheckDate, sup_paymentCheckNumber, sup_paymentAmount, account);

            boolean paymentConfirm = Sup_PaymentController.intoSup_PaymentTable(payment);

            if (paymentConfirm) {
                JOptionPane.showMessageDialog(this, "Supply Payment Added Successfully..");
                setPaymentId();
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your inserted data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setBatchId() {
        try {
            String newBatchId = IDGenerator.getNewID("Batch", "batchId", "B");
            omLabel_NewBatchId.setText(newBatchId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setPaymentId() {
        try {
            String newPaymentId = IDGenerator.getNewID("Sup_Payment", "sup_paymentId", "SP");
            omText_PaymentId.setText(newPaymentId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearAll() {
        omText_PaymentPayAmount1.setText("");
        omText_PaymentPayAmount2.setText("");
        omText_PaymentPayAmount3.setText("");
        omText_PaymentPayAmount4.setText("");
        omText_PaymentPayAmount.setText("");
        omLabel_PaymentNewBalanceView.setText("");
    }

    private void newBalance() {
        double balance = Double.parseDouble(omLabel_PaymentBalanceView.getText());
        double payamount = Double.parseDouble(omText_PaymentPayAmount.getText());
        double newbalance = balance - payamount;
        omLabel_PaymentNewBalanceView.setText(Double.toString(newbalance));
    }

    private void getItemCodeAndBatchIdToNewSelectedItemName(String itemName) {
        try {
            String itemCode = ItemController.getItemCodeToItemName(itemName);
//            omCombo_ItemCode.setSelectedItem(itemCode);
            omCombo_AddItemCode.setSelectedItem(itemCode);

//            Batch batch = BatchController.getLastBatchIdToSelectedItemCode(itemCode);
//
//            if (batch != null) {
//                omLabel_LastBatchId.setText(batch.getBatchId());
////                somTextl_UnitPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
//                omLabel_AvailableQty.setText(Integer.toString(batch.getBatchQty()));
//            } else {
//                //   JOptionPane.showMessageDialog(this, "You still never bought this item..");
//                omLabel_LastBatchId.setText("");
//                //             somTextl_UnitPrice.setText("");
//                omLabel_AvailableQty.setText("");
//            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getItemNameAndBatchIdToNewSelectedItemCode(String itemCode) {
        try {

            Item item = ItemController.getFromItemTable(itemCode);
            String itemName = item.getItemName();
            omCombo_AddItemName.setSelectedItem(itemName);

//            Batch batch = BatchController.getLastBatchIdToSelectedItemCode(itemCode);
//
//            if (batch != null) {
//                omLabel_LastBatchId.setText(batch.getBatchId());
//                omLabel_BuyingPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
//                omLable_SellingPrice.setText(Double.toString(batch.getBatchSellingPrice()));
//                omLabel_FullQtyView1.setText(batch.getBatchDescription());
////                somTextl_UnitPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
//                omLabel_AvailableQty.setText(Integer.toString(batch.getBatchQty()));
//            } else {
//                // JOptionPane.showMessageDialog(this, "You still never bought this item..");
//                omLabel_LastBatchId.setText("");
////                somTextl_UnitPrice.setText("");
//                omLabel_AvailableQty.setText("");
//            }
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
