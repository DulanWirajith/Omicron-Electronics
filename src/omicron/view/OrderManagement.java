/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package omicron.view;

import Others.IDGenerator;
import Others.ValidationController;
import java.awt.Color;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
//import net.sf.jasperreports.engine.JRException;
//import net.sf.jasperreports.engine.JasperCompileManager;
//import net.sf.jasperreports.engine.JasperFillManager;
//import net.sf.jasperreports.engine.JasperPrint;
//import net.sf.jasperreports.engine.JasperReport;
//import net.sf.jasperreports.engine.data.JRTableModelDataSource;
//import net.sf.jasperreports.view.JasperViewer;
import omicron.controller.AccountController;
import omicron.controller.BatchController;
import omicron.controller.BlackStockController;
import omicron.controller.BrandController;
import omicron.controller.Cust_ReturnsController;
import omicron.controller.CustomerController;
import omicron.controller.ItemController;
import omicron.controller.OrdersController;
import omicron.controller.PaymentController;
import omicron.model.Account;
import omicron.model.Batch;
import omicron.model.BlackStock;
import omicron.model.Brand;
import omicron.model.Cust_Returns;
import omicron.model.Customer;
import omicron.model.Item;
import omicron.model.Order_Detail;
import omicron.model.Orders;
import omicron.model.Payment;

/**
 *
 * @author Dulan
 */
public class OrderManagement extends javax.swing.JFrame {

    int timeRun = 0;

    /**
     * Creates new form CustomerManagement
     */
    public OrderManagement() {
        initComponents();
        getClock();
        loadCustomerIds();
        omText_CustomerName.setEditable(false);
        loadItemNames();
        omLabel_itemDetailFullAmountView.setText("0.0");
        setOrderDate();
        setInvoicePayments();
        loadAccounts();
//        omLable_UnitPrice.setText("0.00");
        reasonLable.setVisible(false);
        reasonLable.setText("No Price Change");
        omLabel_BlackStock.setVisible(false);
        returnBatchSellingPrice.setVisible(false);
        setInvoiceId();

        omText_PaymentId.setEditable(false);
        omText_RetId.setEditable(false);

        setPaymentId();
//        setCust_ReturnId();
    }

    OrderManagement(String customerNic) {
        initComponents();
        getClock();
        loadCustomerIds();
        omText_CustomerName.setEditable(false);
        loadItemNames();
        omLabel_itemDetailFullAmountView.setText("0.0");
        setOrderDate();
        setInvoicePayments();
        loadAccounts();
        omText_CstomerNic.setText(customerNic);
        getCustomerDetailsFromCustomerNic();
//        omLable_UnitPrice.setText("0.00");
        returnBatchSellingPrice.setVisible(false);
        reasonLable.setVisible(false);
        reasonLable.setText("No Price Change");
        setInvoiceId();

        omText_PaymentId.setEditable(false);
        omText_RetId.setEditable(false);

        setPaymentId();
//        setCust_ReturnId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homePanel = new javax.swing.JPanel();
        homeLabel = new javax.swing.JLabel();
        homeIconPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        mainButtonPanel = new javax.swing.JPanel();
        closeButtonLabel = new javax.swing.JLabel();
        minimizeButtonLabel = new javax.swing.JLabel();
        clockPanel = new javax.swing.JPanel();
        clock = new javax.swing.JLabel();
        invoicePanel = new javax.swing.JPanel();
        getOrderDetailPanel = new javax.swing.JPanel();
        omLabel_CustomerId = new javax.swing.JLabel();
        omText_OrdersId = new javax.swing.JTextField();
        omCombo_CustomerId = new javax.swing.JComboBox<>();
        omLabel_CustomerName = new javax.swing.JLabel();
        omLabel_OrdersId = new javax.swing.JLabel();
        omLabel_OrdersDate = new javax.swing.JLabel();
        omLabel_OrdersDateView = new javax.swing.JLabel();
        omLabel_OrdersId1 = new javax.swing.JLabel();
        omText_CstomerNic = new javax.swing.JTextField();
        omCheck_AlreadyMember = new javax.swing.JCheckBox();
        omText_CustomerName = new javax.swing.JTextField();
        item_AddAndReturnTabPanel = new javax.swing.JTabbedPane();
        omPanel_SellItem = new javax.swing.JPanel();
        itemDetailPanel = new javax.swing.JPanel();
        omLabel_ItemCode1 = new javax.swing.JLabel();
        omCombo_ItemName = new javax.swing.JComboBox<>();
        omCombo_BatchId = new javax.swing.JComboBox<>();
        omLabel_BatchId1 = new javax.swing.JLabel();
        omLabel_UnitPrice = new javax.swing.JLabel();
        omLabel_ItemName1 = new javax.swing.JLabel();
        omLabel_QtyOnHand1 = new javax.swing.JLabel();
        omLabel_ItemDescription1 = new javax.swing.JLabel();
        omLabel_ItemCode = new javax.swing.JLabel();
        omLabel_QtyOnHandView = new javax.swing.JLabel();
        omLabel_Qty1 = new javax.swing.JLabel();
        omLabel_FullQty1 = new javax.swing.JLabel();
        omLabel_FullQtyView1 = new javax.swing.JLabel();
        omText_Qty = new javax.swing.JTextField();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        omTable_OrderItemDetail = new javax.swing.JTable();
        omLabel_itemDetailFullAmount = new javax.swing.JLabel();
        omLabel_itemDetailRemoveItem = new javax.swing.JLabel();
        omLabel_itemDetailConfirm = new javax.swing.JLabel();
        omLabel_itemDetailFullAmountView = new javax.swing.JLabel();
        omLabel_BlackStock = new javax.swing.JLabel();
        omLabel_itemDetailRemoveItem1 = new javax.swing.JLabel();
        omCombo_BrandDescription = new javax.swing.JComboBox<>();
        omLable_UnitPrice = new javax.swing.JLabel();
        paymentPanel = new javax.swing.JPanel();
        omLabel_PaymentId = new javax.swing.JLabel();
        omLabel_PaymentDate = new javax.swing.JLabel();
        omLable_PaymentTotAmountView = new javax.swing.JLabel();
        omLabel_PaymentAccount = new javax.swing.JLabel();
        omLabel_TotAmount = new javax.swing.JLabel();
        omCombo_PaymentAccounts = new javax.swing.JComboBox<>();
        omLabel_PaymentBalance = new javax.swing.JLabel();
        omLabel_PaymentBalanceView = new javax.swing.JLabel();
        omLabel_PaymentPayAmount = new javax.swing.JLabel();
        omLabel_PaymentNewBalanceView = new javax.swing.JLabel();
        omText_PaymentPayAmount = new javax.swing.JTextField();
        omLabel_PaymentNewBalance = new javax.swing.JLabel();
        omLabel_itemDetailConfirm1 = new javax.swing.JLabel();
        omText_PaymentId = new javax.swing.JTextField();
        omText_PaymentDate = new javax.swing.JLabel();
        omPanel_ReturnItem = new javax.swing.JPanel();
        omTab_ReturnTabbedPane = new javax.swing.JTabbedPane();
        omPanel_GetSellItems = new javax.swing.JPanel();
        itemDetailPanel1 = new javax.swing.JPanel();
        omLabel_ItemCode2 = new javax.swing.JLabel();
        omLabel_BatchId3 = new javax.swing.JLabel();
        omLabel_UnitPrice1 = new javax.swing.JLabel();
        omLabel_ItemName3 = new javax.swing.JLabel();
        omLabel_ItemDescription2 = new javax.swing.JLabel();
        omLabel_ReturnInvoiceItemCode = new javax.swing.JLabel();
        omLabel_Qty3 = new javax.swing.JLabel();
        tablePanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        omTable_OrderItemDetail1 = new javax.swing.JTable();
        omLabel_itemDetailFullAmount1 = new javax.swing.JLabel();
        omLabel_itemDetailFullAmountView1 = new javax.swing.JLabel();
        omLabel_ReturnDetailReturn = new javax.swing.JLabel();
        omLabel_ReturnInvoiceItemName = new javax.swing.JLabel();
        omLabel_ReturnInvoiceBatchId = new javax.swing.JLabel();
        omLabel_ReturnInvoiceQty = new javax.swing.JLabel();
        omLabel_ReturnInvoiceUnitPrice = new javax.swing.JLabel();
        omLabel_ReturnInvoiceDescription = new javax.swing.JLabel();
        omPanel_ReturnItemPanel = new javax.swing.JPanel();
        returnDetailPanel = new javax.swing.JPanel();
        tablePanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        omTable_OrderReturnDetail = new javax.swing.JTable();
        omLabel_ReturnDetailRemove = new javax.swing.JLabel();
        omLabel_ReturnDetailOK = new javax.swing.JLabel();
        returnBatchSellingPrice = new javax.swing.JLabel();
        omLabel_RetID = new javax.swing.JLabel();
        omLabel_ItemName = new javax.swing.JLabel();
        omLabel_ReturnDate = new javax.swing.JLabel();
        omLabel_ReturnDateView = new javax.swing.JLabel();
        omLabel_ItemNameView = new javax.swing.JLabel();
        omLabel_BatchId = new javax.swing.JLabel();
        omLabel_ReturnReason = new javax.swing.JLabel();
        omLabel_BatchIdView = new javax.swing.JLabel();
        omLabel_ReturnQty = new javax.swing.JLabel();
        omText_RetId = new javax.swing.JTextField();
        omText_ReturnReason = new javax.swing.JTextField();
        omLabel_Qty5 = new javax.swing.JLabel();
        omText_SerialNumber2 = new javax.swing.JTextField();
        omLabel_SupplierId = new javax.swing.JLabel();
        reasonLable = new javax.swing.JLabel();
        batchSellingPrice = new javax.swing.JLabel();
        MainLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homePanel.setOpaque(false);

        homeLabel.setFont(new java.awt.Font("Lucida Bright", 3, 85)); // NOI18N
        homeLabel.setForeground(new java.awt.Color(255, 205, 200));
        homeLabel.setText("  O");

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );

        getContentPane().add(homePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 130));

        homeIconPanel.setOpaque(false);

        jButton1.setFont(new java.awt.Font("Miriam Fixed", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 102));
        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homeIconPanelLayout = new javax.swing.GroupLayout(homeIconPanel);
        homeIconPanel.setLayout(homeIconPanelLayout);
        homeIconPanelLayout.setHorizontalGroup(
            homeIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeIconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homeIconPanelLayout.setVerticalGroup(
            homeIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeIconPanelLayout.createSequentialGroup()
                .addContainerGap(495, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        getContentPane().add(homeIconPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 100, 560));

        titlePanel.setOpaque(false);

        titleLabel.setFont(new java.awt.Font("Monotype Corsiva", 3, 48)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 0));
        titleLabel.setText("Order Management...");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGap(0, 25, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(titlePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 440, 50));

        mainButtonPanel.setOpaque(false);

        closeButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/omicron.images/close_64.png"))); // NOI18N
        closeButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonLabelMouseClicked(evt);
            }
        });

        minimizeButtonLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\First Sem Project\\Omicron\\Omicron\\Omicron_Electronics\\src\\omicron.images\\minimize_64.png")); // NOI18N
        minimizeButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeButtonLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainButtonPanelLayout = new javax.swing.GroupLayout(mainButtonPanel);
        mainButtonPanel.setLayout(mainButtonPanelLayout);
        mainButtonPanelLayout.setHorizontalGroup(
            mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainButtonPanelLayout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(minimizeButtonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButtonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mainButtonPanelLayout.setVerticalGroup(
            mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainButtonPanelLayout.createSequentialGroup()
                .addGroup(mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButtonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minimizeButtonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(mainButtonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 0, 130, -1));

        clockPanel.setOpaque(false);

        clock.setFont(new java.awt.Font("DS-Digital", 0, 60)); // NOI18N
        clock.setForeground(new java.awt.Color(0, 165, 255));
        clock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clock.setText("2:13:15  PM");

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
        );

        getContentPane().add(clockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 0, 270, 80));

        invoicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        invoicePanel.setOpaque(false);

        getOrderDetailPanel.setOpaque(false);

        omLabel_CustomerId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_CustomerId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_CustomerId.setText("Customer ID");
        omLabel_CustomerId.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_OrdersId.setBackground(new java.awt.Color(204, 204, 204));
        omText_OrdersId.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_OrdersId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_OrdersIdActionPerformed(evt);
            }
        });

        omCombo_CustomerId.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_CustomerId.setEditable(true);
        omCombo_CustomerId.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omCombo_CustomerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_CustomerIdActionPerformed(evt);
            }
        });

        omLabel_CustomerName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_CustomerName.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_CustomerName.setText("Customer Name");
        omLabel_CustomerName.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_OrdersId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersId.setText("Invoice ID");
        omLabel_OrdersId.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_OrdersDate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersDate.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersDate.setText("Order Date");
        omLabel_OrdersDate.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_OrdersDateView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_OrdersDateView.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_OrdersDateView.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_OrdersDateView.setOpaque(true);

        omLabel_OrdersId1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersId1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersId1.setText("Customer NIC");
        omLabel_OrdersId1.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_CstomerNic.setBackground(new java.awt.Color(204, 204, 204));
        omText_CstomerNic.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_CstomerNic.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        omText_CstomerNic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_CstomerNicActionPerformed(evt);
            }
        });

        omCheck_AlreadyMember.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omCheck_AlreadyMember.setForeground(new java.awt.Color(255, 255, 255));
        omCheck_AlreadyMember.setSelected(true);
        omCheck_AlreadyMember.setText("Already Member");
        omCheck_AlreadyMember.setOpaque(false);
        omCheck_AlreadyMember.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                omCheck_AlreadyMemberItemStateChanged(evt);
            }
        });
        omCheck_AlreadyMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCheck_AlreadyMemberActionPerformed(evt);
            }
        });
        omCheck_AlreadyMember.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                omCheck_AlreadyMemberPropertyChange(evt);
            }
        });

        omText_CustomerName.setBackground(new java.awt.Color(204, 204, 204));
        omText_CustomerName.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_CustomerName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        omText_CustomerName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omText_CustomerNameMouseClicked(evt);
            }
        });
        omText_CustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_CustomerNameActionPerformed(evt);
            }
        });
        omText_CustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_CustomerNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_CustomerNameKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout getOrderDetailPanelLayout = new javax.swing.GroupLayout(getOrderDetailPanel);
        getOrderDetailPanel.setLayout(getOrderDetailPanelLayout);
        getOrderDetailPanelLayout.setHorizontalGroup(
            getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(omCheck_AlreadyMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(omLabel_CustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(omLabel_CustomerId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(omCombo_CustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(omLabel_OrdersId1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(omText_CstomerNic, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(omText_CustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omLabel_OrdersDate, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(omLabel_OrdersId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omText_OrdersId, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(omLabel_OrdersDateView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        getOrderDetailPanelLayout.setVerticalGroup(
            getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(omText_OrdersId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_OrdersId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_OrdersDate, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(omLabel_OrdersDateView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_CustomerId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omCombo_CustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(omCheck_AlreadyMember, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omText_CstomerNic, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(omLabel_OrdersId1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(omLabel_CustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, getOrderDetailPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omText_CustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))))
        );

        item_AddAndReturnTabPanel.setBackground(new java.awt.Color(0, 165, 255));
        item_AddAndReturnTabPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        omPanel_SellItem.setOpaque(false);

        itemDetailPanel.setOpaque(false);

        omLabel_ItemCode1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_ItemCode1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemCode1.setText("Item Name");
        omLabel_ItemCode1.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_ItemName.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_ItemName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_ItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_ItemNameActionPerformed(evt);
            }
        });

        omCombo_BatchId.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_BatchId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_BatchId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_BatchIdActionPerformed(evt);
            }
        });
        omCombo_BatchId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omCombo_BatchIdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omCombo_BatchIdKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                omCombo_BatchIdKeyTyped(evt);
            }
        });

        omLabel_BatchId1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_BatchId1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_BatchId1.setText("Batch ID");
        omLabel_BatchId1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_UnitPrice.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_UnitPrice.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_UnitPrice.setText("Unit Price");
        omLabel_UnitPrice.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_UnitPrice.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemName1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_ItemName1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemName1.setText("Sub Item Name");
        omLabel_ItemName1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemName1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_QtyOnHand1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_QtyOnHand1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_QtyOnHand1.setText("Qty On Hand");
        omLabel_QtyOnHand1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_QtyOnHand1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemDescription1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_ItemDescription1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemDescription1.setText("Sub Item Code");
        omLabel_ItemDescription1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemDescription1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemCode.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ItemCode.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ItemCode.setOpaque(true);

        omLabel_QtyOnHandView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_QtyOnHandView.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_QtyOnHandView.setOpaque(true);

        omLabel_Qty1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_Qty1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_Qty1.setText("Qty ");
        omLabel_Qty1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty1.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_FullQty1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_FullQty1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_FullQty1.setText("Full Qty");
        omLabel_FullQty1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_FullQty1.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_FullQty1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_FullQtyView1.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_FullQtyView1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_FullQtyView1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_FullQtyView1.setOpaque(true);

        omText_Qty.setBackground(new java.awt.Color(204, 204, 204));
        omText_Qty.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omText_Qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_QtyomLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_Qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_QtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_QtyKeyReleased(evt);
            }
        });

        tablePanel.setOpaque(false);

        omTable_OrderItemDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Item Code", "Sub Item Name", "Batch Id", "BatchSelling Price", "Unit Price", "Description", "Qty", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_OrderItemDetail.setOpaque(false);
        jScrollPane1.setViewportView(omTable_OrderItemDetail);

        omLabel_itemDetailFullAmount.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailFullAmount.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailFullAmount.setText("Total Amount");
        omLabel_itemDetailFullAmount.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_itemDetailRemoveItem.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailRemoveItem.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailRemoveItem.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailRemoveItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailRemoveItem.setText("Remove Item");
        omLabel_itemDetailRemoveItem.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailRemoveItem.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailRemoveItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailRemoveItemMouseClicked(evt);
            }
        });

        omLabel_itemDetailConfirm.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailConfirm.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailConfirm.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailConfirm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailConfirm.setText("Confirm Order");
        omLabel_itemDetailConfirm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailConfirm.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailConfirmMouseClicked(evt);
            }
        });

        omLabel_itemDetailFullAmountView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_itemDetailFullAmountView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_itemDetailFullAmountView.setOpaque(true);

        omLabel_BlackStock.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_BlackStock.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_BlackStock.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_BlackStock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_BlackStock.setText("Black Stock");
        omLabel_BlackStock.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_BlackStock.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_BlackStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_BlackStockMouseClicked(evt);
            }
        });

        omLabel_itemDetailRemoveItem1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailRemoveItem1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailRemoveItem1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailRemoveItem1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailRemoveItem1.setText("Print Bill");
        omLabel_itemDetailRemoveItem1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailRemoveItem1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailRemoveItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailRemoveItem1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(omLabel_itemDetailRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_itemDetailConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_BlackStock, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_itemDetailRemoveItem1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailFullAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(omLabel_itemDetailFullAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_itemDetailFullAmountView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_itemDetailRemoveItem, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_BlackStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailRemoveItem1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                    .addComponent(omLabel_itemDetailFullAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        omCombo_BrandDescription.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_BrandDescription.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omCombo_BrandDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omCombo_BrandDescriptionActionPerformed(evt);
            }
        });

        omLable_UnitPrice.setBackground(new java.awt.Color(204, 204, 204));
        omLable_UnitPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLable_UnitPrice.setOpaque(true);
        omLable_UnitPrice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLable_UnitPriceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout itemDetailPanelLayout = new javax.swing.GroupLayout(itemDetailPanel);
        itemDetailPanel.setLayout(itemDetailPanelLayout);
        itemDetailPanelLayout.setHorizontalGroup(
            itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_BatchId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_ItemCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omCombo_BatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omCombo_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemName1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(omLabel_UnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omCombo_BrandDescription, 0, 165, Short.MAX_VALUE)
                            .addComponent(omLable_UnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemDescription1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_QtyOnHand1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_QtyOnHandView, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_FullQty1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_Qty1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omLabel_FullQtyView1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        itemDetailPanelLayout.setVerticalGroup(
            itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(omLabel_ItemCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_ItemDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_QtyOnHand1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(omLabel_QtyOnHandView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(omLabel_ItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omLabel_ItemCode1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(omCombo_ItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                        .addComponent(omLabel_BatchId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(omCombo_BatchId)
                                    .addComponent(omLabel_UnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addComponent(omCombo_BrandDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(omLable_UnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(omLabel_FullQty1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(omLabel_FullQtyView1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(omText_Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(omLabel_Qty1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        paymentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        paymentPanel.setOpaque(false);

        omLabel_PaymentId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_PaymentId.setText("Payment Id");
        omLabel_PaymentId.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentDate.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_PaymentDate.setText("Payment Date");
        omLabel_PaymentDate.setPreferredSize(new java.awt.Dimension(112, 23));

        omLable_PaymentTotAmountView.setBackground(new java.awt.Color(204, 204, 204));
        omLable_PaymentTotAmountView.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLable_PaymentTotAmountView.setOpaque(true);

        omLabel_PaymentAccount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentAccount.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_PaymentAccount.setText("Pay Account");
        omLabel_PaymentAccount.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_TotAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_TotAmount.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_TotAmount.setText("Invoice Tot Amount");
        omLabel_TotAmount.setPreferredSize(new java.awt.Dimension(112, 23));

        omCombo_PaymentAccounts.setBackground(new java.awt.Color(204, 204, 204));
        omCombo_PaymentAccounts.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        omLabel_PaymentBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentBalance.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_PaymentBalance.setText("Balance");
        omLabel_PaymentBalance.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentBalanceView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_PaymentBalanceView.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_PaymentBalanceView.setOpaque(true);

        omLabel_PaymentPayAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentPayAmount.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_PaymentPayAmount.setText("Pay Amount");
        omLabel_PaymentPayAmount.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_PaymentNewBalanceView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_PaymentNewBalanceView.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_PaymentNewBalanceView.setOpaque(true);

        omText_PaymentPayAmount.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentPayAmount.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentPayAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentPayAmountomLabel_QtyViewActionPerformed(evt);
            }
        });
        omText_PaymentPayAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                omText_PaymentPayAmountKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                omText_PaymentPayAmountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                omText_PaymentPayAmountKeyTyped(evt);
            }
        });

        omLabel_PaymentNewBalance.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_PaymentNewBalance.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_PaymentNewBalance.setText("New Balance");
        omLabel_PaymentNewBalance.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_itemDetailConfirm1.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_itemDetailConfirm1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailConfirm1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailConfirm1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_itemDetailConfirm1.setText("Pay ");
        omLabel_itemDetailConfirm1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_itemDetailConfirm1.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_itemDetailConfirm1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_itemDetailConfirm1MouseClicked(evt);
            }
        });

        omText_PaymentId.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omText_PaymentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_PaymentIdomLabel_QtyViewActionPerformed(evt);
            }
        });

        omText_PaymentDate.setBackground(new java.awt.Color(204, 204, 204));
        omText_PaymentDate.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_PaymentDate.setForeground(new java.awt.Color(51, 51, 51));
        omText_PaymentDate.setOpaque(true);

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omLabel_PaymentDate, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(omLabel_PaymentId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(omText_PaymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omText_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_TotAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_PaymentAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLable_PaymentTotAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omCombo_PaymentAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omLabel_PaymentNewBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(omLabel_PaymentPayAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(omLabel_PaymentBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_PaymentNewBalanceView, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailConfirm1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omText_PaymentPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_PaymentBalanceView, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omLable_PaymentTotAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_TotAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_PaymentAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omCombo_PaymentAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_PaymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_PaymentId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omLabel_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_PaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_PaymentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_PaymentBalanceView, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_PaymentPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omText_PaymentPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omLabel_PaymentNewBalanceView, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_PaymentNewBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(omLabel_itemDetailConfirm1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout omPanel_SellItemLayout = new javax.swing.GroupLayout(omPanel_SellItem);
        omPanel_SellItem.setLayout(omPanel_SellItemLayout);
        omPanel_SellItemLayout.setHorizontalGroup(
            omPanel_SellItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_SellItemLayout.createSequentialGroup()
                .addComponent(itemDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(omPanel_SellItemLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        omPanel_SellItemLayout.setVerticalGroup(
            omPanel_SellItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_SellItemLayout.createSequentialGroup()
                .addComponent(itemDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(paymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        item_AddAndReturnTabPanel.addTab("Sell  Item", omPanel_SellItem);

        omPanel_ReturnItem.setOpaque(false);

        omPanel_GetSellItems.setOpaque(false);

        itemDetailPanel1.setOpaque(false);

        omLabel_ItemCode2.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_ItemCode2.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemCode2.setText("Item Name");
        omLabel_ItemCode2.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_BatchId3.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_BatchId3.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_BatchId3.setText("Batch ID");
        omLabel_BatchId3.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_UnitPrice1.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_UnitPrice1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_UnitPrice1.setText("Batch Selling Price");
        omLabel_UnitPrice1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_UnitPrice1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemName3.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_ItemName3.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemName3.setText("Sub Item Name");
        omLabel_ItemName3.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemName3.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemDescription2.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_ItemDescription2.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemDescription2.setText("Sub Item Code");
        omLabel_ItemDescription2.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemDescription2.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ReturnInvoiceItemCode.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnInvoiceItemCode.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ReturnInvoiceItemCode.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_ReturnInvoiceItemCode.setOpaque(true);

        omLabel_Qty3.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        omLabel_Qty3.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_Qty3.setText("Qty ");
        omLabel_Qty3.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty3.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty3.setPreferredSize(new java.awt.Dimension(112, 23));

        tablePanel1.setOpaque(false);

        omTable_OrderItemDetail1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Item Code", "Sub Item Name", "Batch Id", "Batch Selling Price", "Unit Price", "Description", "Qty", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_OrderItemDetail1.setOpaque(false);
        omTable_OrderItemDetail1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omTable_OrderItemDetail1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(omTable_OrderItemDetail1);

        omLabel_itemDetailFullAmount1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_itemDetailFullAmount1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailFullAmount1.setText("Total Amount");
        omLabel_itemDetailFullAmount1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_itemDetailFullAmountView1.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_itemDetailFullAmountView1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_itemDetailFullAmountView1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_itemDetailFullAmountView1.setOpaque(true);

        omLabel_ReturnDetailReturn.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ReturnDetailReturn.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ReturnDetailReturn.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDetailReturn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ReturnDetailReturn.setText("Return Item");
        omLabel_ReturnDetailReturn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ReturnDetailReturn.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ReturnDetailReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ReturnDetailReturnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tablePanel1Layout = new javax.swing.GroupLayout(tablePanel1);
        tablePanel1.setLayout(tablePanel1Layout);
        tablePanel1Layout.setHorizontalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1178, Short.MAX_VALUE)
                    .addGroup(tablePanel1Layout.createSequentialGroup()
                        .addComponent(omLabel_ReturnDetailReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_itemDetailFullAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(omLabel_itemDetailFullAmountView1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        tablePanel1Layout.setVerticalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_itemDetailFullAmountView1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addGroup(tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_itemDetailFullAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(omLabel_ReturnDetailReturn, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))))
        );

        omLabel_ReturnInvoiceItemName.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnInvoiceItemName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ReturnInvoiceItemName.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_ReturnInvoiceItemName.setOpaque(true);

        omLabel_ReturnInvoiceBatchId.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnInvoiceBatchId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ReturnInvoiceBatchId.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_ReturnInvoiceBatchId.setOpaque(true);

        omLabel_ReturnInvoiceQty.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnInvoiceQty.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ReturnInvoiceQty.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_ReturnInvoiceQty.setOpaque(true);

        omLabel_ReturnInvoiceUnitPrice.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnInvoiceUnitPrice.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ReturnInvoiceUnitPrice.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_ReturnInvoiceUnitPrice.setOpaque(true);

        omLabel_ReturnInvoiceDescription.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnInvoiceDescription.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        omLabel_ReturnInvoiceDescription.setForeground(new java.awt.Color(51, 51, 51));
        omLabel_ReturnInvoiceDescription.setOpaque(true);

        javax.swing.GroupLayout itemDetailPanel1Layout = new javax.swing.GroupLayout(itemDetailPanel1);
        itemDetailPanel1.setLayout(itemDetailPanel1Layout);
        itemDetailPanel1Layout.setHorizontalGroup(
            itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                        .addComponent(tablePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                                .addComponent(omLabel_BatchId3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(omLabel_ReturnInvoiceBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                                .addComponent(omLabel_ItemCode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(omLabel_ReturnInvoiceItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemName3, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(omLabel_UnitPrice1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_ReturnInvoiceUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_ReturnInvoiceDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(omLabel_ItemDescription2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemDetailPanel1Layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(omLabel_Qty3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(51, 51, 51)
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omLabel_ReturnInvoiceItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_ReturnInvoiceQty, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(236, 236, 236))))
        );
        itemDetailPanel1Layout.setVerticalGroup(
            itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_ReturnInvoiceItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omLabel_ItemName3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(omLabel_ItemCode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17)
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omLabel_UnitPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(omLabel_BatchId3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(omLabel_ReturnInvoiceBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(omLabel_ItemDescription2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(omLabel_ReturnInvoiceItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(itemDetailPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(omLabel_Qty3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(omLabel_ReturnInvoiceQty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(itemDetailPanel1Layout.createSequentialGroup()
                        .addComponent(omLabel_ReturnInvoiceDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(omLabel_ReturnInvoiceUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 23, Short.MAX_VALUE)
                .addComponent(tablePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout omPanel_GetSellItemsLayout = new javax.swing.GroupLayout(omPanel_GetSellItems);
        omPanel_GetSellItems.setLayout(omPanel_GetSellItemsLayout);
        omPanel_GetSellItemsLayout.setHorizontalGroup(
            omPanel_GetSellItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, omPanel_GetSellItemsLayout.createSequentialGroup()
                .addComponent(itemDetailPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        omPanel_GetSellItemsLayout.setVerticalGroup(
            omPanel_GetSellItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_GetSellItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemDetailPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        omTab_ReturnTabbedPane.addTab("Invoice Details", omPanel_GetSellItems);

        omPanel_ReturnItemPanel.setOpaque(false);

        returnDetailPanel.setOpaque(false);

        tablePanel2.setOpaque(false);

        omTable_OrderReturnDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Return Id", "Return Date", "Return Reason", "Serial Number", "Sub Item Code", "Batch Id", "Batch Selling Price", "Supplier Id "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        omTable_OrderReturnDetail.setOpaque(false);
        jScrollPane3.setViewportView(omTable_OrderReturnDetail);

        omLabel_ReturnDetailRemove.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ReturnDetailRemove.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ReturnDetailRemove.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDetailRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ReturnDetailRemove.setText("Remove Item");
        omLabel_ReturnDetailRemove.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ReturnDetailRemove.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ReturnDetailRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ReturnDetailRemoveMouseClicked(evt);
            }
        });

        omLabel_ReturnDetailOK.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ReturnDetailOK.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ReturnDetailOK.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDetailOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ReturnDetailOK.setText("Confirm");
        omLabel_ReturnDetailOK.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ReturnDetailOK.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ReturnDetailOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ReturnDetailOKMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tablePanel2Layout = new javax.swing.GroupLayout(tablePanel2);
        tablePanel2.setLayout(tablePanel2Layout);
        tablePanel2Layout.setHorizontalGroup(
            tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(omLabel_ReturnDetailRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(omLabel_ReturnDetailOK, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118)
                .addComponent(returnBatchSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(tablePanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1151, Short.MAX_VALUE)
                .addContainerGap())
        );
        tablePanel2Layout.setVerticalGroup(
            tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(tablePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_ReturnDetailRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addComponent(omLabel_ReturnDetailOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(tablePanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(returnBatchSellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)))
                .addGap(8, 8, 8))
        );

        omLabel_RetID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_RetID.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_RetID.setText("Return Id");
        omLabel_RetID.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_ItemName.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemName.setText("Sub Item Code");
        omLabel_ItemName.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemName.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ReturnDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_ReturnDate.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnDate.setText("Return Date");
        omLabel_ReturnDate.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ReturnDate.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ReturnDateView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ReturnDateView.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ReturnDateView.setOpaque(true);

        omLabel_ItemNameView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_ItemNameView.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_ItemNameView.setOpaque(true);

        omLabel_BatchId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_BatchId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_BatchId.setText("Batch Id");
        omLabel_BatchId.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_BatchId.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ReturnReason.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_ReturnReason.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnReason.setText("Return Reason");
        omLabel_ReturnReason.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ReturnReason.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_BatchIdView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_BatchIdView.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_BatchIdView.setOpaque(true);

        omLabel_ReturnQty.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_ReturnQty.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ReturnQty.setText("Suplier Id");
        omLabel_ReturnQty.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ReturnQty.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_ReturnQty.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_RetId.setBackground(new java.awt.Color(204, 204, 204));
        omText_RetId.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_RetId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_RetIdomLabel_QtyViewActionPerformed(evt);
            }
        });

        omText_ReturnReason.setBackground(new java.awt.Color(204, 204, 204));
        omText_ReturnReason.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_ReturnReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_ReturnReasonomLabel_QtyViewActionPerformed(evt);
            }
        });

        omLabel_Qty5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_Qty5.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_Qty5.setText("Searial Number");
        omLabel_Qty5.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty5.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty5.setPreferredSize(new java.awt.Dimension(112, 23));

        omText_SerialNumber2.setBackground(new java.awt.Color(204, 204, 204));
        omText_SerialNumber2.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omText_SerialNumber2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omText_SerialNumber2omLabel_QtyViewActionPerformed(evt);
            }
        });

        omLabel_SupplierId.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_SupplierId.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        omLabel_SupplierId.setOpaque(true);

        javax.swing.GroupLayout returnDetailPanelLayout = new javax.swing.GroupLayout(returnDetailPanel);
        returnDetailPanel.setLayout(returnDetailPanelLayout);
        returnDetailPanelLayout.setHorizontalGroup(
            returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(returnDetailPanelLayout.createSequentialGroup()
                        .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_RetID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_Qty5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omText_RetId, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(omText_SerialNumber2))
                        .addGap(35, 35, 35)
                        .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_ReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(omLabel_ReturnDateView, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
                            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(omLabel_ItemNameView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                                .addComponent(omLabel_ReturnReason, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(omText_ReturnReason, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(omLabel_BatchId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(omLabel_BatchIdView, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(omLabel_ReturnQty, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(omLabel_SupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, returnDetailPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tablePanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        returnDetailPanelLayout.setVerticalGroup(
            returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(omLabel_RetID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_ReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(omText_RetId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(omLabel_ReturnDateView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(omLabel_ReturnReason, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(omText_ReturnReason, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(returnDetailPanelLayout.createSequentialGroup()
                        .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(omLabel_BatchId, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                .addComponent(omLabel_BatchIdView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omLabel_Qty5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(omText_SerialNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(omLabel_ReturnQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_SupplierId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(21, 21, 21))
                    .addGroup(returnDetailPanelLayout.createSequentialGroup()
                        .addGroup(returnDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(returnDetailPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(omLabel_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(omLabel_ItemNameView, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(tablePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout omPanel_ReturnItemPanelLayout = new javax.swing.GroupLayout(omPanel_ReturnItemPanel);
        omPanel_ReturnItemPanel.setLayout(omPanel_ReturnItemPanelLayout);
        omPanel_ReturnItemPanelLayout.setHorizontalGroup(
            omPanel_ReturnItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_ReturnItemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returnDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );
        omPanel_ReturnItemPanelLayout.setVerticalGroup(
            omPanel_ReturnItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(omPanel_ReturnItemPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(returnDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        omTab_ReturnTabbedPane.addTab("Return Details", omPanel_ReturnItemPanel);

        javax.swing.GroupLayout omPanel_ReturnItemLayout = new javax.swing.GroupLayout(omPanel_ReturnItem);
        omPanel_ReturnItem.setLayout(omPanel_ReturnItemLayout);
        omPanel_ReturnItemLayout.setHorizontalGroup(
            omPanel_ReturnItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(omTab_ReturnTabbedPane)
        );
        omPanel_ReturnItemLayout.setVerticalGroup(
            omPanel_ReturnItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(omTab_ReturnTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        item_AddAndReturnTabPanel.addTab("Return  Item", omPanel_ReturnItem);

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(getOrderDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoicePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(item_AddAndReturnTabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(getOrderDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(item_AddAndReturnTabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        getContentPane().add(invoicePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 1250, 620));

        reasonLable.setForeground(new java.awt.Color(51, 51, 51));
        reasonLable.setText("No Discount");
        getContentPane().add(reasonLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 380, 30));
        getContentPane().add(batchSellingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 90, 290, 30));

        MainLable.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\First Sem Project\\Omicron\\Omicron\\Omicron_Electronics\\src\\omicron.images\\final.jpg")); // NOI18N
        MainLable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(MainLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonLabelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeButtonLabelMouseClicked

    private void omText_OrdersIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_OrdersIdActionPerformed
        getOrdersAndOrder_DetailDetails(omTable_OrderItemDetail);
        setInvoicePayments();
        getOrdersAndOrder_DetailDetails(omTable_OrderItemDetail1);
        omText_RetId.setText(omText_OrdersId.getText());
        omText_PaymentPayAmount.setText("");
        omLabel_PaymentNewBalanceView.setText("");
    }//GEN-LAST:event_omText_OrdersIdActionPerformed

    private void omText_CstomerNicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_CstomerNicActionPerformed
        boolean check = ValidationController.checkNic(omText_CstomerNic);
        if (check) {
            getCustomerDetailsFromCustomerNic();
        }
    }//GEN-LAST:event_omText_CstomerNicActionPerformed

    private void omText_QtyomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_QtyomLabel_QtyViewActionPerformed
        viewInOrderItemDetailTable();
    }//GEN-LAST:event_omText_QtyomLabel_QtyViewActionPerformed

    private void omText_PaymentPayAmountomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmountomLabel_QtyViewActionPerformed
        boolean check = ValidationController.priceText(omText_PaymentPayAmount);
        if (check) {
            payment();
        }
    }//GEN-LAST:event_omText_PaymentPayAmountomLabel_QtyViewActionPerformed

    private void omText_RetIdomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_RetIdomLabel_QtyViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_omText_RetIdomLabel_QtyViewActionPerformed

    private void omText_ReturnReasonomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_ReturnReasonomLabel_QtyViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_omText_ReturnReasonomLabel_QtyViewActionPerformed

    private void omText_SerialNumber2omLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_SerialNumber2omLabel_QtyViewActionPerformed
        viewInReturnItemTable();
//        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail1.getModel();
//        int selectedRow = omTable_OrderItemDetail1.getSelectedRow();
//        defaultTableModel.removeRow(selectedRow);

    }//GEN-LAST:event_omText_SerialNumber2omLabel_QtyViewActionPerformed

    private void omCheck_AlreadyMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCheck_AlreadyMemberActionPerformed
        checkAlreadyMemberOrNot();
    }//GEN-LAST:event_omCheck_AlreadyMemberActionPerformed

    private void omText_CustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_CustomerNameActionPerformed

    }//GEN-LAST:event_omText_CustomerNameActionPerformed

    private void omCheck_AlreadyMemberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_omCheck_AlreadyMemberItemStateChanged

    }//GEN-LAST:event_omCheck_AlreadyMemberItemStateChanged

    private void omCheck_AlreadyMemberPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_omCheck_AlreadyMemberPropertyChange

    }//GEN-LAST:event_omCheck_AlreadyMemberPropertyChange

    private void omCombo_ItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_ItemNameActionPerformed
        if (omCombo_ItemName.getSelectedItem().toString() != null) {
            getSubItems();
        }

    }//GEN-LAST:event_omCombo_ItemNameActionPerformed

    private void omCombo_BrandDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_BrandDescriptionActionPerformed
        if (omCombo_ItemName.getSelectedItem().toString() != null) {
            getSubItemCode_FullBatchQtyAndBatchIds();
        }
    }//GEN-LAST:event_omCombo_BrandDescriptionActionPerformed

    private void omCombo_BatchIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_BatchIdActionPerformed
        getBatchDetails();
//        if (omCombo_BatchId.getSelectedItem().toString() != null) {
//            getBatchDetails();
//        }else{
////            omLable_UnitPrice.setText(""));
//                batchSellingPrice.setText("");
//                omLabel_QtyOnHandView.setText("");
//        }
    }//GEN-LAST:event_omCombo_BatchIdActionPerformed

    private void omText_PaymentIdomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omText_PaymentIdomLabel_QtyViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_omText_PaymentIdomLabel_QtyViewActionPerformed

    private void omLabel_itemDetailConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailConfirmMouseClicked
        confirmOrder();

    }//GEN-LAST:event_omLabel_itemDetailConfirmMouseClicked

    private void omCombo_CustomerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omCombo_CustomerIdActionPerformed

        getCustomerDetails();
    }//GEN-LAST:event_omCombo_CustomerIdActionPerformed

    private void omLabel_itemDetailConfirm1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailConfirm1MouseClicked

        intoPaymentTable();

    }//GEN-LAST:event_omLabel_itemDetailConfirm1MouseClicked

    private void omLabel_itemDetailRemoveItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailRemoveItemMouseClicked
        removeRow();
    }//GEN-LAST:event_omLabel_itemDetailRemoveItemMouseClicked

    private void omTable_OrderItemDetail1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omTable_OrderItemDetail1MouseClicked
        intoReturnItemView();
    }//GEN-LAST:event_omTable_OrderItemDetail1MouseClicked

    private void omLable_UnitPriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLable_UnitPriceMouseClicked
        editUnitPrice();
    }//GEN-LAST:event_omLable_UnitPriceMouseClicked

    private void omText_CustomerNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omText_CustomerNameMouseClicked

        if (!omCheck_AlreadyMember.isSelected()) {
            omText_CustomerName.setText("");
        }
    }//GEN-LAST:event_omText_CustomerNameMouseClicked

    private void omLabel_ReturnDetailReturnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ReturnDetailReturnMouseClicked
        addToReturnItemDetailTable();

    }//GEN-LAST:event_omLabel_ReturnDetailReturnMouseClicked

    private void omLabel_ReturnDetailRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ReturnDetailRemoveMouseClicked
        returnTableRemoveRaw();
    }//GEN-LAST:event_omLabel_ReturnDetailRemoveMouseClicked

    private void omLabel_ReturnDetailOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ReturnDetailOKMouseClicked
        intoCustReturnAndSupplyReturnTable();
    }//GEN-LAST:event_omLabel_ReturnDetailOKMouseClicked

    private void omCombo_BatchIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omCombo_BatchIdKeyTyped

    }//GEN-LAST:event_omCombo_BatchIdKeyTyped

    private void omCombo_BatchIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omCombo_BatchIdKeyPressed

    }//GEN-LAST:event_omCombo_BatchIdKeyPressed

    private void omCombo_BatchIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omCombo_BatchIdKeyReleased

    }//GEN-LAST:event_omCombo_BatchIdKeyReleased

    private void omLabel_BlackStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_BlackStockMouseClicked

        addFromBlackStock();
    }//GEN-LAST:event_omLabel_BlackStockMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void omText_QtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_QtyKeyPressed
        ValidationController.vailidateQty(omText_Qty);
    }//GEN-LAST:event_omText_QtyKeyPressed

    private void omText_QtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_QtyKeyReleased
        ValidationController.vailidateQty(omText_Qty);
    }//GEN-LAST:event_omText_QtyKeyReleased

    private void omText_PaymentPayAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmountKeyPressed

    }//GEN-LAST:event_omText_PaymentPayAmountKeyPressed

    private void omText_PaymentPayAmountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmountKeyReleased
//        ValidationController.priceText(omText_PaymentPayAmount);
    }//GEN-LAST:event_omText_PaymentPayAmountKeyReleased

    private void omText_CustomerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_CustomerNameKeyPressed
        ValidationController.name(omText_CustomerName);
    }//GEN-LAST:event_omText_CustomerNameKeyPressed

    private void omText_CustomerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_CustomerNameKeyReleased
        ValidationController.name(omText_CustomerName);
    }//GEN-LAST:event_omText_CustomerNameKeyReleased

    private void omText_PaymentPayAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_omText_PaymentPayAmountKeyTyped
        ValidationController.NumbersAndDotOnly(evt);
    }//GEN-LAST:event_omText_PaymentPayAmountKeyTyped

    private void omLabel_itemDetailRemoveItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_itemDetailRemoveItem1MouseClicked
        printBill();

    }//GEN-LAST:event_omLabel_itemDetailRemoveItem1MouseClicked

    private void minimizeButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeButtonLabelMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeButtonLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MainLable;
    private javax.swing.JLabel batchSellingPrice;
    private javax.swing.JLabel clock;
    private javax.swing.JPanel clockPanel;
    private javax.swing.JLabel closeButtonLabel;
    private javax.swing.JPanel getOrderDetailPanel;
    private javax.swing.JPanel homeIconPanel;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JPanel itemDetailPanel;
    private javax.swing.JPanel itemDetailPanel1;
    private javax.swing.JTabbedPane item_AddAndReturnTabPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainButtonPanel;
    private javax.swing.JLabel minimizeButtonLabel;
    private javax.swing.JCheckBox omCheck_AlreadyMember;
    private javax.swing.JComboBox<String> omCombo_BatchId;
    private javax.swing.JComboBox<String> omCombo_BrandDescription;
    private javax.swing.JComboBox<String> omCombo_CustomerId;
    private javax.swing.JComboBox<String> omCombo_ItemName;
    private javax.swing.JComboBox<String> omCombo_PaymentAccounts;
    private javax.swing.JLabel omLabel_BatchId;
    private javax.swing.JLabel omLabel_BatchId1;
    private javax.swing.JLabel omLabel_BatchId3;
    private javax.swing.JLabel omLabel_BatchIdView;
    private javax.swing.JLabel omLabel_BlackStock;
    private javax.swing.JLabel omLabel_CustomerId;
    private javax.swing.JLabel omLabel_CustomerName;
    private javax.swing.JLabel omLabel_FullQty1;
    private javax.swing.JLabel omLabel_FullQtyView1;
    private javax.swing.JLabel omLabel_ItemCode;
    private javax.swing.JLabel omLabel_ItemCode1;
    private javax.swing.JLabel omLabel_ItemCode2;
    private javax.swing.JLabel omLabel_ItemDescription1;
    private javax.swing.JLabel omLabel_ItemDescription2;
    private javax.swing.JLabel omLabel_ItemName;
    private javax.swing.JLabel omLabel_ItemName1;
    private javax.swing.JLabel omLabel_ItemName3;
    private javax.swing.JLabel omLabel_ItemNameView;
    private javax.swing.JLabel omLabel_OrdersDate;
    private javax.swing.JLabel omLabel_OrdersDateView;
    private javax.swing.JLabel omLabel_OrdersId;
    private javax.swing.JLabel omLabel_OrdersId1;
    private javax.swing.JLabel omLabel_PaymentAccount;
    private javax.swing.JLabel omLabel_PaymentBalance;
    private javax.swing.JLabel omLabel_PaymentBalanceView;
    private javax.swing.JLabel omLabel_PaymentDate;
    private javax.swing.JLabel omLabel_PaymentId;
    private javax.swing.JLabel omLabel_PaymentNewBalance;
    private javax.swing.JLabel omLabel_PaymentNewBalanceView;
    private javax.swing.JLabel omLabel_PaymentPayAmount;
    private javax.swing.JLabel omLabel_Qty1;
    private javax.swing.JLabel omLabel_Qty3;
    private javax.swing.JLabel omLabel_Qty5;
    private javax.swing.JLabel omLabel_QtyOnHand1;
    private javax.swing.JLabel omLabel_QtyOnHandView;
    private javax.swing.JLabel omLabel_RetID;
    private javax.swing.JLabel omLabel_ReturnDate;
    private javax.swing.JLabel omLabel_ReturnDateView;
    private javax.swing.JLabel omLabel_ReturnDetailOK;
    private javax.swing.JLabel omLabel_ReturnDetailRemove;
    private javax.swing.JLabel omLabel_ReturnDetailReturn;
    private javax.swing.JLabel omLabel_ReturnInvoiceBatchId;
    private javax.swing.JLabel omLabel_ReturnInvoiceDescription;
    private javax.swing.JLabel omLabel_ReturnInvoiceItemCode;
    private javax.swing.JLabel omLabel_ReturnInvoiceItemName;
    private javax.swing.JLabel omLabel_ReturnInvoiceQty;
    private javax.swing.JLabel omLabel_ReturnInvoiceUnitPrice;
    private javax.swing.JLabel omLabel_ReturnQty;
    private javax.swing.JLabel omLabel_ReturnReason;
    private javax.swing.JLabel omLabel_SupplierId;
    private javax.swing.JLabel omLabel_TotAmount;
    private javax.swing.JLabel omLabel_UnitPrice;
    private javax.swing.JLabel omLabel_UnitPrice1;
    private javax.swing.JLabel omLabel_itemDetailConfirm;
    private javax.swing.JLabel omLabel_itemDetailConfirm1;
    private javax.swing.JLabel omLabel_itemDetailFullAmount;
    private javax.swing.JLabel omLabel_itemDetailFullAmount1;
    private javax.swing.JLabel omLabel_itemDetailFullAmountView;
    private javax.swing.JLabel omLabel_itemDetailFullAmountView1;
    private javax.swing.JLabel omLabel_itemDetailRemoveItem;
    private javax.swing.JLabel omLabel_itemDetailRemoveItem1;
    private javax.swing.JLabel omLable_PaymentTotAmountView;
    private javax.swing.JLabel omLable_UnitPrice;
    private javax.swing.JPanel omPanel_GetSellItems;
    private javax.swing.JPanel omPanel_ReturnItem;
    private javax.swing.JPanel omPanel_ReturnItemPanel;
    private javax.swing.JPanel omPanel_SellItem;
    private javax.swing.JTabbedPane omTab_ReturnTabbedPane;
    private javax.swing.JTable omTable_OrderItemDetail;
    private javax.swing.JTable omTable_OrderItemDetail1;
    private javax.swing.JTable omTable_OrderReturnDetail;
    private javax.swing.JTextField omText_CstomerNic;
    private javax.swing.JTextField omText_CustomerName;
    private javax.swing.JTextField omText_OrdersId;
    private javax.swing.JLabel omText_PaymentDate;
    private javax.swing.JTextField omText_PaymentId;
    private javax.swing.JTextField omText_PaymentPayAmount;
    private javax.swing.JTextField omText_Qty;
    private javax.swing.JTextField omText_RetId;
    private javax.swing.JTextField omText_ReturnReason;
    private javax.swing.JTextField omText_SerialNumber2;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JLabel reasonLable;
    private javax.swing.JLabel returnBatchSellingPrice;
    private javax.swing.JPanel returnDetailPanel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JPanel tablePanel1;
    private javax.swing.JPanel tablePanel2;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables

    private void getClock() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    Date curDate = new Date();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss aa");
                    String currentTime = dateFormat.format(curDate);

                    clock.setText(currentTime);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
//                        JOptionPane.showMessageDialog(RoomDetails.this, "Database Error...");
                    }
                }
            }
        }).start();
    }

    private void loadCustomerIds() {

        try {
            ArrayList<Customer> allCustomerDetails = CustomerController.getAllCustomerDetails();

            for (Customer customer : allCustomerDetails) {
                omCombo_CustomerId.addItem(customer.getCustomerId());

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadItemNames() {

        try {
            ArrayList<Brand> allBrandDetails = new ArrayList<Brand>();
            allBrandDetails = BrandController.showFromBrandTable();

            for (Brand brand : allBrandDetails) {
                omCombo_ItemName.addItem(brand.getBrandName());

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    private void removeSameItems() {
//        for (int i = 0; i < omCombo_ItemName.getItemCount(); i++) {
//            for (int j = 0; j <omCombo_ItemName.getItemCount(); j++) {
//                if (omCombo_ItemName.getItemAt(i)==omCombo_ItemName.getItemAt(j)) {
//
//                    omCombo_ItemName.removeItemAt(j);
//                }
//            }
//        }
//    }
    private void setOrderDate() {

        Date d1 = new Date(); //Current System date
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        String sDate = df.format(cal.getTime());
        omLabel_OrdersDateView.setText(sDate);
        omText_PaymentDate.setText(sDate);
        omLabel_ReturnDateView.setText(sDate);
    }

    private void setInvoicePayments() {

        try {
            String orderId = omText_OrdersId.getText();
            omLable_PaymentTotAmountView.setText(omLabel_itemDetailFullAmountView.getText());
            ArrayList<Payment> allPaymentIdsDetails = new ArrayList<Payment>();
            allPaymentIdsDetails = PaymentController.getInvoicePayment(orderId);
            double allPayment = 0;
            for (Payment allPaymentIdsDetail : allPaymentIdsDetails) {
                allPayment += allPaymentIdsDetail.getPaymentAmount();
            }
            double totAmount = Double.parseDouble(omLable_PaymentTotAmountView.getText());
            double balance = totAmount - allPayment;

            omLabel_PaymentBalanceView.setText(Double.toString(balance));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getCustomerDetailsFromCustomerNic() {

        try {
            String customerNic = omText_CstomerNic.getText();
            Customer allDetailsAboutOneCustomer = CustomerController.getAllDetailsToCustomerNic(customerNic);
            if (allDetailsAboutOneCustomer != null) {
                omCombo_CustomerId.removeAllItems();
                loadCustomerIds();
                omCombo_CustomerId.setSelectedItem(allDetailsAboutOneCustomer.getCustomerId());
                omText_CustomerName.setText(allDetailsAboutOneCustomer.getCustomerName());
            } else {
                int confirm = JOptionPane.showConfirmDialog(this, "No Customer Found.. Are You want to add new Customer??..");
                if (confirm == 0) {
                    new CustomerManagement(customerNic).setVisible(true);
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadAccounts() {

        try {
            ArrayList<Account> allAccounts = AccountController.loadAllAccounts();
            for (Account account : allAccounts) {
                omCombo_PaymentAccounts.addItem(account.getAccountName());
            }
            omCombo_PaymentAccounts.setSelectedItem("Income Account");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void clearForNextInvoice() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
        defaultTableModel.setRowCount(0);
        omText_CstomerNic.setText("");
        omText_CustomerName.setText("");
        omLabel_ItemCode.setText("");
        omLabel_FullQtyView1.setText("");
        omLable_UnitPrice.setText("");
        omLabel_QtyOnHandView.setText("");
        omText_Qty.setText("");
    }

    private void clearForNextPayment() {
        omLable_PaymentTotAmountView.setText("");
        omLabel_PaymentBalanceView.setText("");
        omText_PaymentPayAmount.setText("");
        omLabel_PaymentNewBalanceView.setText("");
    }

    private void getOrdersAndOrder_DetailDetails(JTable tableName) {

        try {
            String ordersId = omText_OrdersId.getText();
            Orders orders = OrdersController.getAllOrderAndOrder_DetailDetails(ordersId);
            DefaultTableModel defaultTableModel = (DefaultTableModel) tableName.getModel();
            defaultTableModel.setRowCount(0);
            if (orders != null) {
                omText_CustomerName.setText(orders.getCustomerName());
                omText_CustomerName.setEditable(false);
                omText_CstomerNic.setEditable(false);
//                omLabel_ItemCode.setText("");
//                omLabel_FullQtyView1.setText("");
//                omTextl_UnitPrice.setText("");
//                omLabel_QtyOnHandView.setText("");
//                omText_Qty.setText("");
                omLabel_OrdersDateView.setText(orders.getOrdersDate());
                omLabel_itemDetailFullAmountView.setText(Double.toString(orders.getOrdersTot_Amount()));
                omLabel_itemDetailFullAmountView.setEnabled(false);
                omLabel_itemDetailFullAmountView1.setText(Double.toString(orders.getOrdersTot_Amount()));
                omLabel_itemDetailFullAmountView1.setEnabled(false);
                omCombo_CustomerId.setSelectedItem(orders.getCustomerId());
                omCombo_CustomerId.setEnabled(false);

                for (Order_Detail oneOrder_Oetail : orders.getOrderDetailList()) {
                    Item itemDetails = ItemController.getFromItemTable(oneOrder_Oetail.getItemCode());
                    String itemDescription = itemDetails.getItemName();
                    double batchSellingPrice = oneOrder_Oetail.getOrder_detailBatchSellingPrice();
                    double unitPrice = oneOrder_Oetail.getOrder_detailSellingPrice();
                    int qty = oneOrder_Oetail.getOrder_detailQty();
                    double amount = unitPrice * qty;
                    Object[] rowData = {oneOrder_Oetail.getItemCode(), itemDescription, oneOrder_Oetail.getBatchId(), batchSellingPrice, unitPrice, oneOrder_Oetail.getOrder_detailReason(), qty, amount};
                    defaultTableModel.addRow(rowData);
                }
            } else {
                clearForNextInvoice();
                omLabel_itemDetailFullAmountView.setEnabled(true);
                omCombo_CustomerId.setEnabled(true);
                omLabel_itemDetailFullAmountView.setText("0.00");
                omLabel_itemDetailFullAmountView1.setText("0.00");
                omText_OrdersId.setText(ordersId);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void viewInOrderItemDetailTable() {
        int qtyOnHand = Integer.parseInt(omLabel_QtyOnHandView.getText());
        int qty = Integer.parseInt(omText_Qty.getText());
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
        if (qtyOnHand >= qty) {
            String batchId = (String) omCombo_BatchId.getSelectedItem();
            double fullAmount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());
            if (defaultTableModel.getRowCount() == 0) {
                try {
                    String itemCode = omLabel_ItemCode.getText();
                    String desc = (String) omCombo_BrandDescription.getSelectedItem();
                    double batchSellingPrice = Double.parseDouble(this.batchSellingPrice.getText());
                    double unitPrice = Double.parseDouble(omLable_UnitPrice.getText());
                    String reason = reasonLable.getText();
                    double amount = unitPrice * qty;
                    fullAmount += amount;
                    omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
                    Object[] rowData = {itemCode, desc, batchId, batchSellingPrice, unitPrice, reason, qty, amount};
                    defaultTableModel.addRow(rowData);
                    reasonLable.setText("No Price Change");
                    batchId = (String) omCombo_BatchId.getSelectedItem();

                    ArrayList<Batch> batchDetails = BatchController.getBatchDetailsForOneBatchId(batchId);

                    for (Batch batch : batchDetails) {
                        omLable_UnitPrice.setText(Double.toString(batch.getBatchSellingPrice()));
                        omLabel_QtyOnHandView.setText(Integer.toString(batch.getBatchQty()));
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                    Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException ex) {
                    JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                    Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                boolean check = false;
                int rowNumber = 0;
                String batchID = (String) omCombo_BatchId.getSelectedItem();
                for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                    String batchId_inTable = (String) defaultTableModel.getValueAt(i, 2);
                    if (batchId.equals(batchId_inTable)) {
                        check = true;  //samaana nam true kiyala assign wenawa  //samaana naththan thamai false kiyala variable ekata daaganne
                        rowNumber = i;
                        break;
                    } else {
                        check = false;
                    }
                }
                if (check == false) {
                    String itemCode = omLabel_ItemCode.getText();
                    String desc = (String) omCombo_BrandDescription.getSelectedItem();
                    double batchSellingPrice = Double.parseDouble(this.batchSellingPrice.getText());
                    double unitPrice = Double.parseDouble(omLable_UnitPrice.getText());
                    String reason = reasonLable.getText();
                    double amount = unitPrice * qty;
                    fullAmount += amount;
                    omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
                    Object[] rowData = {itemCode, desc, batchId, batchSellingPrice, unitPrice, reason, qty, amount};
                    defaultTableModel.addRow(rowData);
                    reasonLable.setText("No Price Change");
                } else {
                    int confirm = JOptionPane.showConfirmDialog(this, "You already buy this item in row number " + (rowNumber + 1) + "\n Are you want to modifi item qty??");
                    if (confirm == 0) {
                        String newQty = JOptionPane.showInputDialog("How many qty do you want again??");
                        int newQtyy = Integer.parseInt(newQty);
                        int qtyInTable = (int) defaultTableModel.getValueAt(rowNumber, 5);
                        int allQty = newQtyy + qtyInTable;
                        if (qtyOnHand >= allQty) {
                            double unitPricee = (double) defaultTableModel.getValueAt(rowNumber, 3);
                            double newAmount = unitPricee * allQty;

                            double totalAmountInRow = (double) defaultTableModel.getValueAt(rowNumber, 6);

                            double totalAmountInTable = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());

                            double newTotalAmount = totalAmountInTable - totalAmountInRow + newAmount;

                            omLabel_itemDetailFullAmountView.setText(Double.toString(newTotalAmount));

                            defaultTableModel.setValueAt(allQty, rowNumber, 5);
                            defaultTableModel.setValueAt(newAmount, rowNumber, 6);
                        } else {
                            int freeQty = qtyOnHand - qtyInTable;
                            JOptionPane.showMessageDialog(this, "You have only " + freeQty + " qty on your Stock \nYou can't get " + newQtyy);
                        }

                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "You have only " + qtyOnHand + " qty on your Stock");
        }
        omText_Qty.setText("");

    }

    private void payment() {
        double balance = Double.parseDouble(omLabel_PaymentBalanceView.getText());
        double payment = Double.parseDouble(omText_PaymentPayAmount.getText());
        double newBalance = balance - payment;
        omLabel_PaymentNewBalanceView.setText(Double.toString(newBalance));
    }

    private void viewInReturnItemTable() {
        String serial_num = omText_SerialNumber2.getText();
        String returnReason = omText_ReturnReason.getText();
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderReturnDetail.getModel();
        if (!returnReason.equals("")) {

            if (!serial_num.equals("")) {

                double unitPrice = Double.parseDouble(returnBatchSellingPrice.getText());
//                if (omLabel_BatchIdView.getText().equals("Black")) {
//                    String uniPrice = JOptionPane.showInputDialog(this, "Please input Unit Price to this Item..");
//                    unitPrice = Double.parseDouble(uniPrice);
//                }

                if (defaultTableModel.getRowCount() == 0) {

                    String returnId = omText_RetId.getText();
                    String returnDate = omLabel_ReturnDateView.getText();
                    String itemName = omLabel_ItemNameView.getText();
                    String batchId = omLabel_BatchIdView.getText();
                    String supplierId = omLabel_SupplierId.getText();
                    Object[] rowData = {returnId, returnDate, returnReason, serial_num, itemName, batchId, unitPrice, supplierId};
                    defaultTableModel.addRow(rowData);

                } else {
                    boolean check = false;
                    int rowNumber = 0;

                    for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                        String serial_inTable = (String) defaultTableModel.getValueAt(i, 3);
                        if (serial_num.equals(serial_inTable)) {
                            check = true;  //samaana nam true kiyala assign wenawa  //samaana naththan thamai false kiyala variable ekata daaganne
                            rowNumber = i;
                            break;
                        } else {
                            check = false;
                        }
                    }
                    if (check == false) {
                        String returnId = omText_RetId.getText();
                        String returnDate = omLabel_ReturnDateView.getText();
                        String itemName = omLabel_ItemNameView.getText();
                        String batchId = omLabel_BatchIdView.getText();
                        String supplierId = omLabel_SupplierId.getText();
                        Object[] rowData = {returnId, returnDate, returnReason, serial_num, itemName, batchId, unitPrice, supplierId};
                        defaultTableModel.addRow(rowData);
                    } else {
                        JOptionPane.showMessageDialog(this, "This Serial Number is Already Entered in Row Number " + rowNumber + 1);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter Serial Number..");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please enter Reason to Return Item..");
        }

        omText_ReturnReason.setText("");
        omText_SerialNumber2.setText("");
        omLabel_ItemNameView.setText("");
        omLabel_BatchIdView.setText("");
        omLabel_SupplierId.setText("");

    }

    private void checkAlreadyMemberOrNot() {
        if (omCheck_AlreadyMember.isSelected()) {
            omText_CustomerName.setEditable(false);
            omText_CustomerName.setText("");
            omCombo_CustomerId.setEnabled(true);
            omCombo_CustomerId.setEditable(true);
            omText_CstomerNic.setEditable(true);
        } else {
            omText_CustomerName.setEditable(true);
            omCombo_CustomerId.setEditable(false);
            omCombo_CustomerId.setSelectedItem("C000");
            omCombo_CustomerId.setEnabled(false);
            omText_CstomerNic.setEditable(false);
            omText_CstomerNic.setText("");
        }
    }

    private void getSubItems() {

        try {
            omLable_UnitPrice.setText("");
            omLabel_QtyOnHandView.setText("");
            omCombo_BrandDescription.removeAllItems();
            String brandName = (String) omCombo_ItemName.getSelectedItem();
            String brandId = BrandController.getBrandId(brandName);
            ArrayList<Item> getItems = ItemController.getItemListToBrandId(brandId);
            for (Item item : getItems) {
                omCombo_BrandDescription.addItem(item.getItemName());

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getSubItemCode_FullBatchQtyAndBatchIds() {
        omLable_UnitPrice.setText("");
        omLabel_QtyOnHandView.setText("");
        batchSellingPrice.setText("");
        try {
            String itemName = (String) omCombo_BrandDescription.getSelectedItem();
            String itemCode = ItemController.getItemCodeToItemName(itemName);
            omLabel_ItemCode.setText(itemCode);

            ArrayList<Batch> getBatchIDs = BatchController.getAllBatchIdsToItemCode(itemCode);
            omCombo_BatchId.removeAllItems();
            int fullBatchQty = 0;
            for (Batch batchID : getBatchIDs) {
                omCombo_BatchId.addItem(batchID.getBatchId());
                fullBatchQty += batchID.getBatchQty();
            }
            omLabel_FullQtyView1.setText(Integer.toString(fullBatchQty));
            Item item = ItemController.getFromItemTable(itemCode);
            if (item != null) {
                int itemRe_OrderLevel = item.getItemRe_OrderLevel();
                if (fullBatchQty < itemRe_OrderLevel) {
                    omLabel_FullQtyView1.setForeground(Color.red);
                } else {
                    omLabel_FullQtyView1.setForeground(Color.black);
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getBatchDetails() {
        try {
            String batchId = (String) omCombo_BatchId.getSelectedItem();
            ArrayList<Batch> batchDetails = BatchController.getBatchDetailsForOneBatchId(batchId);

            for (Batch batch : batchDetails) {
                omLable_UnitPrice.setText(Double.toString(batch.getBatchSellingPrice()));
                batchSellingPrice.setText(Double.toString(batch.getBatchSellingPrice()));
                omLabel_QtyOnHandView.setText(Integer.toString(batch.getBatchQty()));

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void confirmOrder() {
        try {
            String totalAmount = omLabel_itemDetailFullAmountView.getText();
            omLable_PaymentTotAmountView.setText(totalAmount);

            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
            ArrayList<Order_Detail> orderDetailList = new ArrayList<>();
            ArrayList<BlackStock> blackStockList = new ArrayList<>();
            String customerId = omCombo_CustomerId.getSelectedItem().toString();
            String customerName = omText_CustomerName.getText();
            String ordersId = omText_OrdersId.getText();
            String ordersDate = omLabel_OrdersDateView.getText();
            double ordersTot_Aount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());

            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String itemCode = (String) defaultTableModel.getValueAt(i, 0);
                String batchId = (String) defaultTableModel.getValueAt(i, 2);
                int order_detailQty = (int) defaultTableModel.getValueAt(i, 6);
                //int order_detailQty =Integer.parseInt(order_detailQt);
                double order_detailBatchSellingPrice = (double) defaultTableModel.getValueAt(i, 3);
                double order_detailSellingPrice = (double) defaultTableModel.getValueAt(i, 4);
                //double order_detailTotAmount = (double) defaultTableModel.getValueAt(i, 5);
                String order_detailReason = (String) defaultTableModel.getValueAt(i, 5);   //price change reason
                orderDetailList.add(new Order_Detail(itemCode, ordersId, batchId, order_detailQty, order_detailBatchSellingPrice, order_detailSellingPrice, order_detailReason));

                if (batchId.equals("Black")) {
                    blackStockList.add(new BlackStock(itemCode, order_detailSellingPrice));
                }
            }

            Orders orders = new Orders(customerId, customerName, ordersId, ordersDate, ordersTot_Aount, orderDetailList, blackStockList);

            boolean addOrNot = OrdersController.intoOrdersTable(orders);

            if (addOrNot) {
                JOptionPane.showMessageDialog(this, "Order added Succesfully..");
//                
                setInvoiceId();

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your inserted data.. Please check again..");
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getCustomerDetails() {
        String customerId = (String) omCombo_CustomerId.getSelectedItem();
        if (customerId != null) {
            try {
                Customer customer = CustomerController.getFromCustomerTable(customerId);
                omText_CstomerNic.setText(customer.getCustomerNic());
                omText_CustomerName.setText(customer.getCustomerName());
            } catch (SQLException ex) {
                Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private void intoPaymentTable() {
        try {
            String ordersId = omText_OrdersId.getText();
            String accountName = (String) omCombo_PaymentAccounts.getSelectedItem();
            String paymentId = omText_PaymentId.getText();
            String paymentDate = omText_PaymentDate.getText();
            double paymentAmount = Double.parseDouble(omText_PaymentPayAmount.getText());
            Account account = new Account(accountName, paymentAmount);

            Payment payment = new Payment(ordersId, accountName, paymentId, paymentDate, paymentAmount, account);
            boolean paymentAddOrNot = PaymentController.intoPaymentTable(payment);
            if (paymentAddOrNot) {
                JOptionPane.showMessageDialog(this, "Payment added Successfully..");
//                
                setPaymentId();

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your inserted data.. Please check again..");
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeRow() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
        int selectedRow = omTable_OrderItemDetail.getSelectedRow();
        double amount = (double) defaultTableModel.getValueAt(selectedRow, 6);
        double fullAmount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());
        if (selectedRow >= 0) {
            defaultTableModel.removeRow(selectedRow);
            fullAmount -= amount;
            omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
        } else {
            JOptionPane.showMessageDialog(this, "Select row first..");
        }
    }

    private void intoReturnItemView() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
            int row = omTable_OrderItemDetail1.getSelectedRow();
            String subItemCode = (String) defaultTableModel.getValueAt(row, 0);
            Item item = ItemController.getFromItemTable(subItemCode);
            String itemCode = item.getBrandId();
            String subItemName = BrandController.getBrandNameToShowAllItems(itemCode);
            double batchSellingPrice = (double) defaultTableModel.getValueAt(row, 3);
            int qty = (int) defaultTableModel.getValueAt(row, 6);
            omLabel_ReturnInvoiceItemName.setText(subItemName);
            omLabel_ReturnInvoiceDescription.setText((String) defaultTableModel.getValueAt(row, 1));
            omLabel_ReturnInvoiceItemCode.setText(subItemCode);
            omLabel_ReturnInvoiceBatchId.setText((String) defaultTableModel.getValueAt(row, 2));
            omLabel_ReturnInvoiceUnitPrice.setText(Double.toString(batchSellingPrice));
            omLabel_ReturnInvoiceQty.setText(Integer.toString(qty));
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void editUnitPrice() {
        String check = omLable_UnitPrice.getText();

        if (!check.equals("")) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you want to edit Unit Price??");
            if (confirm == 0) {
                String newUnitPrice = JOptionPane.showInputDialog("Imput your new Unit Price..");
                omLable_UnitPrice.setText(newUnitPrice);
                double unitPrice = Double.parseDouble(newUnitPrice);
                if (unitPrice > 0) {
                    String reason = JOptionPane.showInputDialog("Enter Reason to change Unit Price");
                    reasonLable.setText(reason);
                }
            }
        }
    }

    private void addToReturnItemDetailTable() {

        try {
            String subItemName = omLabel_ReturnInvoiceDescription.getText();
            String batchId = omLabel_ReturnInvoiceBatchId.getText();
            String subItemCode = omLabel_ReturnInvoiceItemCode.getText();
            returnBatchSellingPrice.setText(omLabel_ReturnInvoiceUnitPrice.getText());
            Item item = ItemController.getFromItemTable(subItemCode);
            omLabel_SupplierId.setText(item.getSupplierId());

            omLabel_ItemNameView.setText(subItemCode);
            omLabel_BatchIdView.setText(batchId);
            omTab_ReturnTabbedPane.setSelectedIndex(1);

        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void returnTableRemoveRaw() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderReturnDetail.getModel();
        int selectedRow = omTable_OrderReturnDetail.getSelectedRow();
        if (selectedRow >= 0) {
            defaultTableModel.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Select row first..");
        }
    }

    private void intoCustReturnAndSupplyReturnTable() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderReturnDetail.getModel();
            ArrayList<Cust_Returns> returnItems = new ArrayList<>();
            String ordersId = omText_OrdersId.getText();
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String serial_num = (String) defaultTableModel.getValueAt(i, 3);
                String returnReason = (String) defaultTableModel.getValueAt(i, 2);
                String returnId = (String) defaultTableModel.getValueAt(i, 0);
                String returnDate = (String) defaultTableModel.getValueAt(i, 1);
                String itemCode = (String) defaultTableModel.getValueAt(i, 4);
                String batchId = (String) defaultTableModel.getValueAt(i, 5);
                double batchSellingPrice = (double) defaultTableModel.getValueAt(i, 6);
                String supplierId = (String) defaultTableModel.getValueAt(i, 7);
                String Sup_Return_Status = "NOT OK";
                String Sup_Return_returnDescription = "From Customer Returns";

                returnItems.add(new Cust_Returns(ordersId, returnId, serial_num, batchId, batchSellingPrice, itemCode, supplierId, returnReason, returnDate, Sup_Return_Status, Sup_Return_returnDescription));
            }

            boolean isAddedOrNot = Cust_ReturnsController.insertIntoCustomer_ReturnsTable(returnItems);
            if (isAddedOrNot) {
                JOptionPane.showMessageDialog(this, "Customer Returns Added Successfully..");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your inserted data.. Please check again..");
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addFromBlackStock() {
        int confirmOrNot = JOptionPane.showConfirmDialog(this, "Are you want to add this item from Black Stock??");
        DefaultTableModel defaultTableModel = (DefaultTableModel) omTable_OrderItemDetail.getModel();
        String itemCode = omLabel_ItemCode.getText();
        if (confirmOrNot == 0) {
            boolean check = false;
            int rowNumber = 0;
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String batchInTable = (String) defaultTableModel.getValueAt(i, 2);
                if (batchInTable.equals("Black")) {
                    String itemInTable = (String) defaultTableModel.getValueAt(i, 0);
                    if (itemInTable.equals(itemCode)) {
                        check = true;
                        rowNumber = i;
                        break;
                    } else {
                        check = false;
                    }
                }
            }

            if (check == false) {
                try {
                    double fullAmount = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());

                    String desc = (String) omCombo_BrandDescription.getSelectedItem();
                    String qty = JOptionPane.showInputDialog("Enter qty..");
                    int qtyInt = Integer.parseInt(qty);
                    String price = JOptionPane.showInputDialog("Enter Batch Selling Price..");
                    double unitPrice = Double.parseDouble(price);
                    int confirmDiscount = JOptionPane.showConfirmDialog(this, "Are you want to add Discount price??..");

                    double amount;
                    double discountUnitPrice = 0.00;
                    String reason;
                    if (confirmDiscount == 0) {
                        String priceDisc = JOptionPane.showInputDialog("Enter Discount price");
                        discountUnitPrice = Double.parseDouble(priceDisc);
                        amount = discountUnitPrice * qtyInt;
                        fullAmount += amount;
                        reason = "Discount Available";

                    } else {
                        amount = unitPrice * qtyInt;
                        fullAmount += amount;
                        reason = "No Discount";
                    }
                    double tableUnitPrice = unitPrice;

                    if (discountUnitPrice != 0.00) {
                        tableUnitPrice = discountUnitPrice;
                    }
                    omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));

                    String batchId = "Black";
                    Object[] rowData = {itemCode, desc, batchId, unitPrice, tableUnitPrice, reason, qtyInt, amount};

                    String status = "NO";
                    String confirm = "Not confirm";

                    BlackStock blackStock = new BlackStock(itemCode, unitPrice, discountUnitPrice, qtyInt, status, confirm, tableUnitPrice);
                    boolean addOrNot = BlackStockController.intoBlackStockTable(blackStock);

                    if (addOrNot) {
                        defaultTableModel.addRow(rowData);
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                    Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException ex) {
                    JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                    Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                int con = JOptionPane.showConfirmDialog(this, "You have already buy this item in Row Number" + (rowNumber + 1) + "\nAre you want to buy this item again?? ");
                if (con == 0) {
                    try {
                        double fullAmountt = Double.parseDouble(omLabel_itemDetailFullAmountView.getText());
                        double amountt = (double) defaultTableModel.getValueAt(rowNumber, 6);
                        fullAmountt -= amountt;
                        String newqty = JOptionPane.showInputDialog("Input qty..");
                        int newQty = Integer.parseInt(newqty);
                        //String tableQtyy=defaultTableModel.getValueAt(rowNumber, 5);

                        int tableQty = (int) defaultTableModel.getValueAt(rowNumber, 5);
                        int totQty = newQty + tableQty;
                        double price = (double) defaultTableModel.getValueAt(rowNumber, 3);
                        amountt = price * totQty;
                        fullAmountt += amountt;
                        double tableUniPri = (double) defaultTableModel.getValueAt(rowNumber, 3);
                        boolean isUpdatedd = BlackStockController.modifyQty(itemCode, tableUniPri, newQty);
                        if (isUpdatedd) {
                            //JOptionPane.showMessageDialog(this, "Eror in your inserted..");
                            defaultTableModel.setValueAt(totQty, rowNumber, 5);
                            defaultTableModel.setValueAt(amountt, rowNumber, 6);
                            omLabel_itemDetailFullAmountView.setText(Double.toString(fullAmountt));
                        } else {
                            JOptionPane.showMessageDialog(this, "Eror in your inserted data..");

                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                        Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
                        Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }

    }

    private void setInvoiceId() {
        try {
            String newInvoiceId = IDGenerator.getNewID("Orders", "ordersId", "O");
            omText_OrdersId.setText(newInvoiceId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setPaymentId() {
        try {
            String newPaymentId = IDGenerator.getNewID("Payment", "paymentId", "P");
            omText_PaymentId.setText(newPaymentId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setCust_ReturnId() {
        try {
            String newCust_ReturnId = IDGenerator.getNewID("Cust_Returns", "returnId", "CR");
            omText_RetId.setText(newCust_ReturnId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printBill() {
        try {
            InputStream inputStream = getClass().getResourceAsStream("Invoice.jrxml");
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            hashMap.put("invoiceNumber", omText_OrdersId.getText());
            hashMap.put("date", omLabel_OrdersDateView.getText());
            hashMap.put("customerName", omText_CustomerName.getText());
            hashMap.put("totalAmount", omLabel_itemDetailFullAmountView.getText());
            hashMap.put("payAmount", omText_PaymentPayAmount.getText());
            hashMap.put("balance", omLabel_PaymentNewBalanceView.getText());

            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(omTable_OrderItemDetail.getModel()));
            JasperViewer.viewReport(jasperPrint);

            clearForNextPayment();
            clearForNextInvoice();

        } catch (JRException ex) {
            Logger.getLogger(OrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
