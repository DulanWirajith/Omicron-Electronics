/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package omicron.view;

import Others.IDController;
import Others.IDGenerator;
import Others.ValidationController;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.scripts.JO;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import omicron.controller.BatchController;
import omicron.controller.ItemController;
import omicron.controller.SupplierController;
import omicron.controller.Supply_OrderController;
import omicron.controller.Supply_Order_DetailController;
import omicron.model.Batch;
import omicron.model.Item;
import omicron.model.Supplier;
import omicron.model.Supply_Order;
import omicron.model.Supply_Order_Detail;

/**
 *
 * @author Dulan
 */
public class SupplierOrderManagement extends javax.swing.JFrame {

    int timeRun = 0;

    /**
     * Creates new form CustomerManagement
     */
    public SupplierOrderManagement() {
        initComponents();
        getClock();
        loadSupplierIDs();
        setSupplierOrderDate();
        loadSOID();
        somAddText_WillReceiveDate.setVisible(false);
        somLabel_WillReceiveDate.setVisible(false);

    }

    SupplierOrderManagement(Supply_Order order) {
        initComponents();
        getClock();
        loadSupplierIDs();
        setSupplierOrderDate();
        loadPreviousOrder(order);
        loadSOID();
        somAddText_WillReceiveDate.setVisible(false);
        somLabel_WillReceiveDate.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homePanel = new javax.swing.JPanel();
        homeLabel = new javax.swing.JLabel();
        homeIconPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        mainButtonPanel = new javax.swing.JPanel();
        closeButtonLabel = new javax.swing.JLabel();
        minimizeButtonLabel = new javax.swing.JLabel();
        clockPanel = new javax.swing.JPanel();
        clock = new javax.swing.JLabel();
        invoicePanel = new javax.swing.JPanel();
        getOrderDetailPanel = new javax.swing.JPanel();
        omLabel_CustomerId = new javax.swing.JLabel();
        sommAddText_SupplierOrderId = new javax.swing.JTextField();
        somCombo_SupplierId = new javax.swing.JComboBox<>();
        omLabel_CustomerName = new javax.swing.JLabel();
        somLabel_SupplierNameView = new javax.swing.JLabel();
        omLabel_OrdersId = new javax.swing.JLabel();
        omLabel_OrdersDate = new javax.swing.JLabel();
        somLabel_SupplierOrderDateView = new javax.swing.JLabel();
        somLabel_SupplierNic = new javax.swing.JLabel();
        somAddText_SupplierNic = new javax.swing.JTextField();
        somLabel_WillReceiveDate = new javax.swing.JLabel();
        somAddText_WillReceiveDate = new javax.swing.JTextField();
        itemDetailPanel = new javax.swing.JPanel();
        omLabel_ItemCode1 = new javax.swing.JLabel();
        somCombo_ItemName = new javax.swing.JComboBox<>();
        omLabel_BatchId1 = new javax.swing.JLabel();
        omLabel_UnitPrice = new javax.swing.JLabel();
        omLabel_ItemName1 = new javax.swing.JLabel();
        omLabel_QtyOnHand = new javax.swing.JLabel();
        somLable_LastBatchId = new javax.swing.JLabel();
        omLabel_Qty1 = new javax.swing.JLabel();
        somText_OrderedQty = new javax.swing.JTextField();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        somTable_OrderItemDetail = new javax.swing.JTable();
        somLabel_itemDetailFullAmount = new javax.swing.JLabel();
        somLabel_itemDetailRemove = new javax.swing.JLabel();
        somLabel_itemDetailOK = new javax.swing.JLabel();
        somLabel_itemDetailFullAmountView = new javax.swing.JLabel();
        omLabel_ItemName2 = new javax.swing.JLabel();
        somLabel_itemDetailOK1 = new javax.swing.JLabel();
        somTextl_UnitPrice = new javax.swing.JTextField();
        omLabel_QtyOnHandView = new javax.swing.JLabel();
        somCombo_ItemCode = new javax.swing.JComboBox<>();
        MainLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homePanel.setOpaque(false);

        homeLabel.setFont(new java.awt.Font("Lucida Bright", 3, 85)); // NOI18N
        homeLabel.setForeground(new java.awt.Color(255, 205, 200));
        homeLabel.setText("  O");

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );

        getContentPane().add(homePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 130));

        homeIconPanel.setOpaque(false);

        jButton1.setFont(new java.awt.Font("Miriam Fixed", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 102));
        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homeIconPanelLayout = new javax.swing.GroupLayout(homeIconPanel);
        homeIconPanel.setLayout(homeIconPanelLayout);
        homeIconPanelLayout.setHorizontalGroup(
            homeIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeIconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        homeIconPanelLayout.setVerticalGroup(
            homeIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeIconPanelLayout.createSequentialGroup()
                .addContainerGap(495, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        getContentPane().add(homeIconPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, -1, 560));

        titlePanel.setOpaque(false);

        titleLabel.setFont(new java.awt.Font("Monotype Corsiva", 3, 46)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 0));
        titleLabel.setText("Supply Order Management...");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 79, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(titlePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 640, 50));

        mainButtonPanel.setOpaque(false);

        closeButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/omicron.images/close_64.png"))); // NOI18N
        closeButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonLabelMouseClicked(evt);
            }
        });

        minimizeButtonLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\First Sem Project\\Omicron\\Omicron\\Omicron_Electronics\\src\\omicron.images\\minimize_64.png")); // NOI18N
        minimizeButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeButtonLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainButtonPanelLayout = new javax.swing.GroupLayout(mainButtonPanel);
        mainButtonPanel.setLayout(mainButtonPanelLayout);
        mainButtonPanelLayout.setHorizontalGroup(
            mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainButtonPanelLayout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(minimizeButtonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButtonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mainButtonPanelLayout.setVerticalGroup(
            mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainButtonPanelLayout.createSequentialGroup()
                .addGroup(mainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButtonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minimizeButtonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(mainButtonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 0, 130, -1));

        clockPanel.setOpaque(false);

        clock.setFont(new java.awt.Font("DS-Digital", 0, 62)); // NOI18N
        clock.setForeground(new java.awt.Color(0, 165, 255));
        clock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clock.setText("2:13:15  PM");

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clockPanelLayout.createSequentialGroup()
                .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clock, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
        );

        getContentPane().add(clockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 60, 300, 80));

        invoicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        invoicePanel.setOpaque(false);

        getOrderDetailPanel.setOpaque(false);

        omLabel_CustomerId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_CustomerId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_CustomerId.setText("Supplier ID");
        omLabel_CustomerId.setPreferredSize(new java.awt.Dimension(112, 23));

        sommAddText_SupplierOrderId.setBackground(new java.awt.Color(204, 204, 204));
        sommAddText_SupplierOrderId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        sommAddText_SupplierOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sommAddText_SupplierOrderIdActionPerformed(evt);
            }
        });

        somCombo_SupplierId.setBackground(new java.awt.Color(204, 204, 204));
        somCombo_SupplierId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somCombo_SupplierId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                somCombo_SupplierIdMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                somCombo_SupplierIdMousePressed(evt);
            }
        });
        somCombo_SupplierId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somCombo_SupplierIdActionPerformed(evt);
            }
        });

        omLabel_CustomerName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_CustomerName.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_CustomerName.setText("Supplier Name");
        omLabel_CustomerName.setPreferredSize(new java.awt.Dimension(112, 23));

        somLabel_SupplierNameView.setBackground(new java.awt.Color(204, 204, 204));
        somLabel_SupplierNameView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somLabel_SupplierNameView.setForeground(new java.awt.Color(0, 51, 51));
        somLabel_SupplierNameView.setOpaque(true);

        omLabel_OrdersId.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersId.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersId.setText("Supplier Order ID");
        omLabel_OrdersId.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_OrdersDate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_OrdersDate.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_OrdersDate.setText("Order Date");
        omLabel_OrdersDate.setPreferredSize(new java.awt.Dimension(112, 23));

        somLabel_SupplierOrderDateView.setBackground(new java.awt.Color(204, 204, 204));
        somLabel_SupplierOrderDateView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somLabel_SupplierOrderDateView.setForeground(new java.awt.Color(0, 51, 51));
        somLabel_SupplierOrderDateView.setOpaque(true);

        somLabel_SupplierNic.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somLabel_SupplierNic.setForeground(new java.awt.Color(255, 255, 255));
        somLabel_SupplierNic.setText("Supplier NIC");
        somLabel_SupplierNic.setPreferredSize(new java.awt.Dimension(112, 23));

        somAddText_SupplierNic.setBackground(new java.awt.Color(204, 204, 204));
        somAddText_SupplierNic.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somAddText_SupplierNic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somAddText_SupplierNicActionPerformed(evt);
            }
        });

        somLabel_WillReceiveDate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somLabel_WillReceiveDate.setForeground(new java.awt.Color(255, 255, 255));
        somLabel_WillReceiveDate.setText("Will Receive Date");
        somLabel_WillReceiveDate.setPreferredSize(new java.awt.Dimension(112, 23));

        somAddText_WillReceiveDate.setBackground(new java.awt.Color(204, 204, 204));
        somAddText_WillReceiveDate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somAddText_WillReceiveDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somAddText_WillReceiveDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout getOrderDetailPanelLayout = new javax.swing.GroupLayout(getOrderDetailPanel);
        getOrderDetailPanel.setLayout(getOrderDetailPanelLayout);
        getOrderDetailPanelLayout.setHorizontalGroup(
            getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_CustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(somCombo_SupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_OrdersId, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sommAddText_SupplierOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_OrdersDate, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(somLabel_SupplierNic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(somAddText_SupplierNic, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(somLabel_SupplierOrderDateView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addComponent(omLabel_CustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(40, 40, 40))
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addComponent(somLabel_WillReceiveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)))
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(somLabel_SupplierNameView, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(somAddText_WillReceiveDate))
                .addContainerGap())
        );
        getOrderDetailPanelLayout.setVerticalGroup(
            getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, getOrderDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omLabel_CustomerId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(somCombo_SupplierId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(somLabel_SupplierNic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(somAddText_SupplierNic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_CustomerName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(somLabel_SupplierNameView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(getOrderDetailPanelLayout.createSequentialGroup()
                        .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_OrdersDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sommAddText_SupplierOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_OrdersId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(somLabel_SupplierOrderDateView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(getOrderDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(somLabel_WillReceiveDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(somAddText_WillReceiveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        itemDetailPanel.setBackground(new java.awt.Color(0, 165, 255));
        itemDetailPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        itemDetailPanel.setOpaque(false);

        omLabel_ItemCode1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ItemCode1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemCode1.setText("Sub Item Name");
        omLabel_ItemCode1.setPreferredSize(new java.awt.Dimension(112, 23));

        somCombo_ItemName.setBackground(new java.awt.Color(204, 204, 204));
        somCombo_ItemName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somCombo_ItemName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                somCombo_ItemNameMouseClicked(evt);
            }
        });
        somCombo_ItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somCombo_ItemNameActionPerformed(evt);
            }
        });

        omLabel_BatchId1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_BatchId1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_BatchId1.setText("Last Batch ID");
        omLabel_BatchId1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_UnitPrice.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_UnitPrice.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_UnitPrice.setText("Buying Price");
        omLabel_UnitPrice.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_UnitPrice.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_ItemName1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ItemName1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemName1.setText("Sub Item Code");
        omLabel_ItemName1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemName1.setPreferredSize(new java.awt.Dimension(112, 23));

        omLabel_QtyOnHand.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_QtyOnHand.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_QtyOnHand.setText("Qty On Hand");
        omLabel_QtyOnHand.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_QtyOnHand.setPreferredSize(new java.awt.Dimension(112, 23));

        somLable_LastBatchId.setBackground(new java.awt.Color(204, 204, 204));
        somLable_LastBatchId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somLable_LastBatchId.setOpaque(true);

        omLabel_Qty1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_Qty1.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_Qty1.setText("Request Qty ");
        omLabel_Qty1.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty1.setMinimumSize(new java.awt.Dimension(93, 25));
        omLabel_Qty1.setPreferredSize(new java.awt.Dimension(112, 23));

        somText_OrderedQty.setBackground(new java.awt.Color(204, 204, 204));
        somText_OrderedQty.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somText_OrderedQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somText_OrderedQtyomLabel_QtyViewActionPerformed(evt);
            }
        });
        somText_OrderedQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                somText_OrderedQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                somText_OrderedQtyKeyReleased(evt);
            }
        });

        tablePanel.setOpaque(false);

        somTable_OrderItemDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Item Name", "Sub Item Code", "Batch Id", "Bought Unit Price", "Qty", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        somTable_OrderItemDetail.setOpaque(false);
        jScrollPane1.setViewportView(somTable_OrderItemDetail);

        somLabel_itemDetailFullAmount.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somLabel_itemDetailFullAmount.setForeground(new java.awt.Color(255, 255, 255));
        somLabel_itemDetailFullAmount.setText("Total Amount");
        somLabel_itemDetailFullAmount.setPreferredSize(new java.awt.Dimension(112, 23));

        somLabel_itemDetailRemove.setBackground(new java.awt.Color(0, 155, 255));
        somLabel_itemDetailRemove.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somLabel_itemDetailRemove.setForeground(new java.awt.Color(255, 255, 255));
        somLabel_itemDetailRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        somLabel_itemDetailRemove.setText("Remove Item");
        somLabel_itemDetailRemove.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        somLabel_itemDetailRemove.setPreferredSize(new java.awt.Dimension(112, 23));
        somLabel_itemDetailRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                somLabel_itemDetailRemoveMouseClicked(evt);
            }
        });

        somLabel_itemDetailOK.setBackground(new java.awt.Color(0, 155, 255));
        somLabel_itemDetailOK.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somLabel_itemDetailOK.setForeground(new java.awt.Color(255, 255, 255));
        somLabel_itemDetailOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        somLabel_itemDetailOK.setText("Confirm");
        somLabel_itemDetailOK.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        somLabel_itemDetailOK.setPreferredSize(new java.awt.Dimension(112, 23));
        somLabel_itemDetailOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                somLabel_itemDetailOKMouseClicked(evt);
            }
        });

        somLabel_itemDetailFullAmountView.setBackground(new java.awt.Color(204, 204, 204));
        somLabel_itemDetailFullAmountView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somLabel_itemDetailFullAmountView.setText("0.00");
        somLabel_itemDetailFullAmountView.setOpaque(true);

        omLabel_ItemName2.setBackground(new java.awt.Color(0, 155, 255));
        omLabel_ItemName2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        omLabel_ItemName2.setForeground(new java.awt.Color(255, 255, 255));
        omLabel_ItemName2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        omLabel_ItemName2.setText("Add New Item");
        omLabel_ItemName2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        omLabel_ItemName2.setMaximumSize(new java.awt.Dimension(93, 25));
        omLabel_ItemName2.setPreferredSize(new java.awt.Dimension(112, 23));
        omLabel_ItemName2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                omLabel_ItemName2MouseClicked(evt);
            }
        });

        somLabel_itemDetailOK1.setBackground(new java.awt.Color(0, 155, 255));
        somLabel_itemDetailOK1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somLabel_itemDetailOK1.setForeground(new java.awt.Color(255, 255, 255));
        somLabel_itemDetailOK1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        somLabel_itemDetailOK1.setText("Print Bill");
        somLabel_itemDetailOK1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        somLabel_itemDetailOK1.setPreferredSize(new java.awt.Dimension(112, 23));
        somLabel_itemDetailOK1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                somLabel_itemDetailOK1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(somLabel_itemDetailRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(somLabel_itemDetailOK, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(omLabel_ItemName2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(somLabel_itemDetailOK1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                        .addComponent(somLabel_itemDetailFullAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(somLabel_itemDetailFullAmountView, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(somLabel_itemDetailFullAmountView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(somLabel_itemDetailFullAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(somLabel_itemDetailRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(somLabel_itemDetailOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(omLabel_ItemName2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(somLabel_itemDetailOK1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(13, 13, 13))
        );

        somTextl_UnitPrice.setBackground(new java.awt.Color(204, 204, 204));
        somTextl_UnitPrice.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        somTextl_UnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somTextl_UnitPriceomLabel_QtyViewActionPerformed(evt);
            }
        });
        somTextl_UnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                somTextl_UnitPriceKeyTyped(evt);
            }
        });

        omLabel_QtyOnHandView.setBackground(new java.awt.Color(204, 204, 204));
        omLabel_QtyOnHandView.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        omLabel_QtyOnHandView.setOpaque(true);

        somCombo_ItemCode.setBackground(new java.awt.Color(204, 204, 204));
        somCombo_ItemCode.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        somCombo_ItemCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                somCombo_ItemCodeMouseClicked(evt);
            }
        });
        somCombo_ItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somCombo_ItemCodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout itemDetailPanelLayout = new javax.swing.GroupLayout(itemDetailPanel);
        itemDetailPanel.setLayout(itemDetailPanelLayout);
        itemDetailPanelLayout.setHorizontalGroup(
            itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(itemDetailPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, itemDetailPanelLayout.createSequentialGroup()
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(omLabel_BatchId1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_ItemCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addComponent(somLable_LastBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(omLabel_UnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(somTextl_UnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(omLabel_QtyOnHand, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(omLabel_QtyOnHandView, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(omLabel_Qty1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(somText_OrderedQty, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(somCombo_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(omLabel_ItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(somCombo_ItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(361, 361, 361)))))
                .addGap(60, 60, 60))
        );
        itemDetailPanelLayout.setVerticalGroup(
            itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(omLabel_ItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(omLabel_ItemCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(somCombo_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(somCombo_ItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_UnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_BatchId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(somTextl_UnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(omLabel_QtyOnHand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(omLabel_QtyOnHandView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(itemDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(omLabel_Qty1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(somText_OrderedQty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(somLable_LastBatchId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getOrderDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1257, 1257, 1257))
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(getOrderDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(itemDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(invoicePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 1210, 530));

        MainLable.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\First Sem Project\\Omicron\\Omicron\\Omicron_Electronics\\src\\omicron.images\\final.jpg")); // NOI18N
        MainLable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(MainLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonLabelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeButtonLabelMouseClicked

    private void sommAddText_SupplierOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sommAddText_SupplierOrderIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sommAddText_SupplierOrderIdActionPerformed

    private void somAddText_SupplierNicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somAddText_SupplierNicActionPerformed
        String supplierNic = somAddText_SupplierNic.getText();
        searchByNic(supplierNic);

    }//GEN-LAST:event_somAddText_SupplierNicActionPerformed

    private void somTextl_UnitPriceomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somTextl_UnitPriceomLabel_QtyViewActionPerformed
        boolean check = ValidationController.priceText(somTextl_UnitPrice);
        if (check) {
            somText_OrderedQty.requestFocus();
        }
    }//GEN-LAST:event_somTextl_UnitPriceomLabel_QtyViewActionPerformed

    private void somText_OrderedQtyomLabel_QtyViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somText_OrderedQtyomLabel_QtyViewActionPerformed
        viewOrderItemInTable();
    }//GEN-LAST:event_somText_OrderedQtyomLabel_QtyViewActionPerformed

    private void somAddText_WillReceiveDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somAddText_WillReceiveDateActionPerformed
        // TODO add your handling code here:
        try {
            new Date(somAddText_WillReceiveDate.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(homeIconPanel, ex.getMessage());
        }
    }//GEN-LAST:event_somAddText_WillReceiveDateActionPerformed

    private void somCombo_SupplierIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somCombo_SupplierIdActionPerformed
        String supplierId = (String) somCombo_SupplierId.getSelectedItem();
        loadSupplierDetails(supplierId);
        loadItemIdsAndNames(supplierId);
    }//GEN-LAST:event_somCombo_SupplierIdActionPerformed

    private void somCombo_ItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somCombo_ItemNameActionPerformed
        String itemName = (String) somCombo_ItemName.getSelectedItem();
        if (itemName != null) {
            getItemCodeAndBatchIdToSelectedItemName(itemName);
        }

    }//GEN-LAST:event_somCombo_ItemNameActionPerformed

    private void somCombo_ItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somCombo_ItemCodeActionPerformed
        String itemCode = (String) somCombo_ItemCode.getSelectedItem();
        //JOptionPane.showMessageDialog(this, itemCode);

        if (itemCode != null) {
            getItemNameAndBatchIdToSelectedItemCode(itemCode);
        }

    }//GEN-LAST:event_somCombo_ItemCodeActionPerformed

    private void somCombo_SupplierIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somCombo_SupplierIdMouseClicked

    }//GEN-LAST:event_somCombo_SupplierIdMouseClicked

    private void somCombo_ItemNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somCombo_ItemNameMouseClicked

    }//GEN-LAST:event_somCombo_ItemNameMouseClicked

    private void somCombo_ItemCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somCombo_ItemCodeMouseClicked

    }//GEN-LAST:event_somCombo_ItemCodeMouseClicked

    private void somCombo_SupplierIdMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somCombo_SupplierIdMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_somCombo_SupplierIdMousePressed

    private void somLabel_itemDetailRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somLabel_itemDetailRemoveMouseClicked
        removeRaw();
    }//GEN-LAST:event_somLabel_itemDetailRemoveMouseClicked

    private void somLabel_itemDetailOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somLabel_itemDetailOKMouseClicked
        confirmSupplyOrder();
    }//GEN-LAST:event_somLabel_itemDetailOKMouseClicked

    private void omLabel_ItemName2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_omLabel_ItemName2MouseClicked
        int cheat = 0;
        Supply_Order order = getDetailsToArray();
        new ItemManagement(order).setVisible(true);

    }//GEN-LAST:event_omLabel_ItemName2MouseClicked

    private void minimizeButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeButtonLabelMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeButtonLabelMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void somText_OrderedQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_somText_OrderedQtyKeyPressed
        ValidationController.vailidateQty(somText_OrderedQty);
    }//GEN-LAST:event_somText_OrderedQtyKeyPressed

    private void somText_OrderedQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_somText_OrderedQtyKeyReleased
        ValidationController.vailidateQty(somText_OrderedQty);
    }//GEN-LAST:event_somText_OrderedQtyKeyReleased

    private void somTextl_UnitPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_somTextl_UnitPriceKeyTyped
        ValidationController.NumbersAndDotOnly(evt);
    }//GEN-LAST:event_somTextl_UnitPriceKeyTyped

    private void somLabel_itemDetailOK1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_somLabel_itemDetailOK1MouseClicked
        printBill();
        loadSOID();
        DefaultTableModel defaultTableModel=(DefaultTableModel) somTable_OrderItemDetail.getModel();
        defaultTableModel.setRowCount(0);
    }//GEN-LAST:event_somLabel_itemDetailOK1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierOrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierOrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierOrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierOrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SupplierOrderManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MainLable;
    private javax.swing.JLabel clock;
    private javax.swing.JPanel clockPanel;
    private javax.swing.JLabel closeButtonLabel;
    private javax.swing.JPanel getOrderDetailPanel;
    private javax.swing.JPanel homeIconPanel;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JPanel itemDetailPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainButtonPanel;
    private javax.swing.JLabel minimizeButtonLabel;
    private javax.swing.JLabel omLabel_BatchId1;
    private javax.swing.JLabel omLabel_CustomerId;
    private javax.swing.JLabel omLabel_CustomerName;
    private javax.swing.JLabel omLabel_ItemCode1;
    private javax.swing.JLabel omLabel_ItemName1;
    private javax.swing.JLabel omLabel_ItemName2;
    private javax.swing.JLabel omLabel_OrdersDate;
    private javax.swing.JLabel omLabel_OrdersId;
    private javax.swing.JLabel omLabel_Qty1;
    private javax.swing.JLabel omLabel_QtyOnHand;
    private javax.swing.JLabel omLabel_QtyOnHandView;
    private javax.swing.JLabel omLabel_UnitPrice;
    private javax.swing.JTextField somAddText_SupplierNic;
    private javax.swing.JTextField somAddText_WillReceiveDate;
    private javax.swing.JComboBox<String> somCombo_ItemCode;
    private javax.swing.JComboBox<String> somCombo_ItemName;
    private javax.swing.JComboBox<String> somCombo_SupplierId;
    private javax.swing.JLabel somLabel_SupplierNameView;
    private javax.swing.JLabel somLabel_SupplierNic;
    private javax.swing.JLabel somLabel_SupplierOrderDateView;
    private javax.swing.JLabel somLabel_WillReceiveDate;
    private javax.swing.JLabel somLabel_itemDetailFullAmount;
    private javax.swing.JLabel somLabel_itemDetailFullAmountView;
    private javax.swing.JLabel somLabel_itemDetailOK;
    private javax.swing.JLabel somLabel_itemDetailOK1;
    private javax.swing.JLabel somLabel_itemDetailRemove;
    private javax.swing.JLabel somLable_LastBatchId;
    private javax.swing.JTable somTable_OrderItemDetail;
    private javax.swing.JTextField somText_OrderedQty;
    private javax.swing.JTextField somTextl_UnitPrice;
    private javax.swing.JTextField sommAddText_SupplierOrderId;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables

    private void getClock() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    Date curDate = new Date();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss aa");
                    String currentTime = dateFormat.format(curDate);

                    clock.setText(currentTime);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
//                        JOptionPane.showMessageDialog(RoomDetails.this, "Database Error...");
                    }
                }
            }
        }).start();
    }

    private void loadSupplierIDs() {
        try {
            ArrayList<Supplier> allSupplierDetails = SupplierController.getAllSupplierDetails();

            for (Supplier allSupplierDetail : allSupplierDetails) {
                somCombo_SupplierId.addItem(allSupplierDetail.getSupplierId());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setSupplierOrderDate() {
        Date d1 = new Date(); //Current System date
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        String sDate = df.format(cal.getTime());
        somLabel_SupplierOrderDateView.setText(sDate);
        somAddText_WillReceiveDate.setText(sDate);
    }

    private void loadSupplierDetails(String supplierId) {
        try {
            Supplier supplterDetail = SupplierController.getFromSupplierTable(supplierId);
            somAddText_SupplierNic.setText(supplterDetail.getSupplierNic());
            somLabel_SupplierNameView.setText(supplterDetail.getSupplierName());
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadItemIdsAndNames(String supplierId) {
        somCombo_ItemCode.removeAllItems();
        somCombo_ItemName.removeAllItems();
        try {
            ArrayList<Item> itemIds = ItemController.getItemIdsToOneSupplier(supplierId);
            for (Item item : itemIds) {
                somCombo_ItemCode.addItem(item.getItemCode());
                somCombo_ItemName.addItem(item.getItemName());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getItemNameAndBatchIdToSelectedItemCode(String itemCode) {
        try {

            Item item = ItemController.getFromItemTable(itemCode);
            String itemName = item.getItemName();
            somCombo_ItemName.setSelectedItem(itemName);

            Batch batch = BatchController.getLastBatchIdToSelectedItemCode(itemCode);

            if (batch != null) {
                somLable_LastBatchId.setText(batch.getBatchId());
                somTextl_UnitPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
                omLabel_QtyOnHandView.setText(Integer.toString(batch.getBatchQty()));
            } else {
                // JOptionPane.showMessageDialog(this, "You still never bought this item..");
                somLable_LastBatchId.setText("");
                somTextl_UnitPrice.setText("");
                omLabel_QtyOnHandView.setText("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getItemCodeAndBatchIdToSelectedItemName(String itemName) {
        try {
            String itemCode = ItemController.getItemCodeToItemName(itemName);
            somCombo_ItemCode.setSelectedItem(itemCode);

            Batch batch = BatchController.getLastBatchIdToSelectedItemCode(itemCode);

            if (batch != null) {
                somLable_LastBatchId.setText(batch.getBatchId());
                somTextl_UnitPrice.setText(Double.toString(batch.getBatchBuyingPrice()));
                omLabel_QtyOnHandView.setText(Integer.toString(batch.getBatchQty()));
            } else {
                //   JOptionPane.showMessageDialog(this, "You still never bought this item..");
                somLable_LastBatchId.setText("");
                somTextl_UnitPrice.setText("");
                omLabel_QtyOnHandView.setText("");
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Supply_Order getDetailsToArray() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) somTable_OrderItemDetail.getModel();
        String supplierId = (String) somCombo_SupplierId.getSelectedItem();
        String supplier_orderId = sommAddText_SupplierOrderId.getText();
        String supplier_orderRequestDate = somLabel_SupplierOrderDateView.getText();
        double supplier_orderTotAmount = Double.parseDouble(somLabel_itemDetailFullAmountView.getText());
        String supplier_orderWillReceiveDate = somAddText_WillReceiveDate.getText();

        ArrayList<Supply_Order_Detail> supply_Order_Details = new ArrayList<>();
        for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
            String subItemName = (String) defaultTableModel.getValueAt(i, 0);
            String itemCode = (String) defaultTableModel.getValueAt(i, 1);
            String batchId = (String) defaultTableModel.getValueAt(i, 2);
            double batchUnitPrice = (double) defaultTableModel.getValueAt(i, 3);
            int supplier_order_detailRequestQty = (int) defaultTableModel.getValueAt(i, 4);
            double amount = (double) defaultTableModel.getValueAt(i, 5);
            supply_Order_Details.add(new Supply_Order_Detail(itemCode, supplier_orderId, supplier_order_detailRequestQty, subItemName, batchId, batchUnitPrice, amount));

        }

        Supply_Order orderDetails = new Supply_Order(supplierId, supplier_orderId, supplier_orderRequestDate, supplier_orderTotAmount, supplier_orderWillReceiveDate, supply_Order_Details);
        return orderDetails;
    }

    private void searchByNic(String supplierNic) {
        try {
            Supplier supplier = SupplierController.getSupplierDetailsToNic(supplierNic);
            if (supplier != null) {
                somCombo_SupplierId.setSelectedItem(supplier.getSupplierId());
                somLabel_SupplierNameView.setText(supplier.getSupplierName());
            } else {
                int confirm = JOptionPane.showConfirmDialog(this, "This supplier is not in your list. Are you want to add new Supplier??..");
                if (confirm == 0) {
                    Supply_Order orderDetails = getDetailsToArray();
                    new SupplierManagement(orderDetails).setVisible(true);
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadPreviousOrder(Supply_Order order) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) somTable_OrderItemDetail.getModel();
        somCombo_SupplierId.setSelectedItem(order.getSupplierId());
        sommAddText_SupplierOrderId.setText(order.getSupply_orderId());
        somLabel_SupplierOrderDateView.setText(order.getSupply_orderRequestDate());
        somLabel_itemDetailFullAmountView.setText(Double.toString(order.getSupply_orderTotAmount()));
        somAddText_WillReceiveDate.setText(order.getSupply_orderWillReceiveDate());

        ArrayList<Supply_Order_Detail> order_Detail = order.getSupply_Order_Details();
        for (Supply_Order_Detail supply_Order_Detail : order_Detail) {
            Object[] rowData = {supply_Order_Detail.getSubItemName(), supply_Order_Detail.getItemCode(), supply_Order_Detail.getBatchId(), supply_Order_Detail.getBatchUnitPrice(), supply_Order_Detail.getSupply_order_detailRequestQty(), supply_Order_Detail.getAmount()};
            defaultTableModel.addRow(rowData);

        }

    }

    private void loadSOID() {
        try {
            String newId = IDGenerator.getNewID("Supply_Order", "supply_orderId", "SO");
            sommAddText_SupplierOrderId.setText(newId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void viewOrderItemInTable() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) somTable_OrderItemDetail.getModel();

        double fullAmount = Double.parseDouble(somLabel_itemDetailFullAmountView.getText());
        if (defaultTableModel.getRowCount() == 0) {

            String itemName = (String) somCombo_ItemName.getSelectedItem();
            String itemCode = (String) somCombo_ItemCode.getSelectedItem();
            String batchId = somLable_LastBatchId.getText();
            double unitPrice = Double.parseDouble(somTextl_UnitPrice.getText());
            int qty = Integer.parseInt(somText_OrderedQty.getText());
            double amount = unitPrice * qty;
            fullAmount += amount;
            Object[] rowData = {itemName, itemCode, batchId, unitPrice, qty, amount};
            defaultTableModel.addRow(rowData);
            somLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
        } else {
            boolean check = false;
            int rowNumber = 0;
            String itemCode = (String) somCombo_ItemCode.getSelectedItem();
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String itemCode_inTable = (String) defaultTableModel.getValueAt(i, 1);
                if (itemCode.equals(itemCode_inTable)) {
                    check = true;  //samaana nam true kiyala assign wenawa  //samaana naththan thamai false kiyala variable ekata daaganne
                    rowNumber = i;
                    break;
                } else {
                    check = false;
                }
            }
            if (check == false) {
                String itemName = (String) somCombo_ItemName.getSelectedItem();
                String itemCodee = (String) somCombo_ItemCode.getSelectedItem();
                String batchId = somLable_LastBatchId.getText();
                double unitPrice = Double.parseDouble(somTextl_UnitPrice.getText());
                int qty = Integer.parseInt(somText_OrderedQty.getText());
                double amount = unitPrice * qty;
                fullAmount += amount;
                Object[] rowData = {itemName, itemCodee, batchId, unitPrice, qty, amount};
                defaultTableModel.addRow(rowData);
                somLabel_itemDetailFullAmountView.setText(Double.toString(fullAmount));
            } else {
                JOptionPane.showMessageDialog(this, "You already order this item in row number " + (rowNumber + 1));

            }
        }
        somLable_LastBatchId.setText("");
        somTextl_UnitPrice.setText("");
        omLabel_QtyOnHandView.setText("");
        somText_OrderedQty.setText("");
    }

    private void removeRaw() {
        int selectedRow = somTable_OrderItemDetail.getSelectedRow();
        double totalAmount = Double.parseDouble(somLabel_itemDetailFullAmountView.getText());

        if (selectedRow >= 0) {
            DefaultTableModel defaultTableModel = (DefaultTableModel) somTable_OrderItemDetail.getModel();
            double amount = (double) defaultTableModel.getValueAt(selectedRow, 5);
            totalAmount -= amount;
            somLabel_itemDetailFullAmountView.setText(Double.toString(totalAmount));
            defaultTableModel.removeRow(selectedRow);

        } else {
            JOptionPane.showMessageDialog(this, "Select row first..");
        }
    }

    private void confirmSupplyOrder() {
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) somTable_OrderItemDetail.getModel();
            String supplierId = (String) somCombo_SupplierId.getSelectedItem();
            String supplier_orderId = sommAddText_SupplierOrderId.getText();
            String supplier_orderRequestDate = somLabel_SupplierOrderDateView.getText();
            double supplier_orderTotAmount = Double.parseDouble(somLabel_itemDetailFullAmountView.getText());
            String supplier_orderWillReceiveDate = somAddText_WillReceiveDate.getText();

            ArrayList<Supply_Order_Detail> supply_Order_Details = new ArrayList<>();
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {

                String itemCode = (String) defaultTableModel.getValueAt(i, 1);
                int supplier_order_detailRequestQty = (int) defaultTableModel.getValueAt(i, 4);
                String batchId = (String) defaultTableModel.getValueAt(i, 2);
                supply_Order_Details.add(new Supply_Order_Detail(itemCode, supplier_orderId, supplier_order_detailRequestQty, batchId));

            }

            Supply_Order orderDetails = new Supply_Order(supplierId, supplier_orderId, supplier_orderRequestDate, supplier_orderTotAmount, supplier_orderWillReceiveDate, supply_Order_Details);

            boolean isAddedOrNot = Supply_OrderController.intoSupply_OrderTable(orderDetails);

            if (isAddedOrNot) {
                JOptionPane.showMessageDialog(this, "Supply Order Added Successfully..");

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error in your inserted data.. Please check again..");
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(GRNManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Error in your Inserted Data.. Please check again..");
            Logger.getLogger(DamageManage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printBill() {
        try {
            InputStream inputStream = getClass().getResourceAsStream("SOrder.jrxml");
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            hashMap.put("invoiceNumber", sommAddText_SupplierOrderId.getText());
            hashMap.put("date", somLabel_SupplierOrderDateView.getText());
            hashMap.put("customerName", somLabel_SupplierNameView.getText());
            hashMap.put("totalAmount", somLabel_itemDetailFullAmountView.getText());

            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(somTable_OrderItemDetail.getModel()));
            JasperViewer.viewReport(jasperPrint);

        } catch (JRException ex) {
            Logger.getLogger(SupplierOrderManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
